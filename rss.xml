<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Python Piura</title><link>http://pythonpiura.org/</link><description>Comunidad Python Piura</description><atom:link href="http://pythonpiura.org/rss.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Sun, 24 Jul 2016 17:53:05 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Migrando de Wordpress a Nikola</title><link>http://pythonpiura.org/posts/migrando-de-wordpress-a-nikola/</link><dc:creator>Miguel Amaya</dc:creator><description>&lt;div&gt;&lt;p&gt;Despues de haber trabajado durante mucho tiempo en Wordpress decidimos usar algo mas pythonesco y encontramos el proyecto Nikola, que se adapta muy bien a lo que nosotros necesitamos como comunidad, asi que decidimos migrar, para ello seguimos la documentacion oficial del proyecto y algunos tutoriales adicionales, en este post vamos a relatar nuestra experiencia, esperando que sea util a nuestros lectores.&lt;/p&gt;
&lt;p&gt;Primero creamos nuestro entorno virtual, en esta oportunidad usamos python3 para obtener un mejor rendimiento con Nikola,&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_0b0c052f84e049dba355212e0a204ef7-1"&gt;&lt;/a&gt;python3 -m venv nikola
&lt;/pre&gt;&lt;p&gt;Activamos el entorno virtual:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_b1cb78a4e81c47ef91375b58334f444a-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;source&lt;/span&gt; nikola/bin/activate
&lt;/pre&gt;&lt;p&gt;Antes de iniciar la instalacion de Nikola debimos instalar algunas dependencias para asegurarnos que todo funcione sin ningun problema:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_57db68fc94e14355869482cada9f7fa5-1"&gt;&lt;/a&gt;sudo apt-get install python3-dev
&lt;a name="rest_code_57db68fc94e14355869482cada9f7fa5-2"&gt;&lt;/a&gt;sudo apt-get install libxml2-dev libxslt1-dev zlib1g-dev
&lt;a name="rest_code_57db68fc94e14355869482cada9f7fa5-3"&gt;&lt;/a&gt;sudo apt-get build-dep python3-lxml python3-pil
&lt;/pre&gt;&lt;p&gt;Luego de ello debimos hacer una actualizacion de pip por un problema raro que se nos estaba presentando en la instalacion:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_5a34f3f5635c45e9a8542c4d88678ded-1"&gt;&lt;/a&gt;pip install --upgrade pip
&lt;/pre&gt;&lt;p&gt;Luego procedimos a instalar Nikola y lo hicimos, de acuerdo a la sugerencia de su propia pagina, de la siguiente manera:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_cb4835c8f294440196db135d5086c71d-1"&gt;&lt;/a&gt;pip install --upgrade &lt;span class="s2"&gt;"Nikola[extras]"&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Nos demoramos un poquito, pero finalmente ya teniamos a Nikola instalado en nuestra maquina, como a nosotros no nos interesaba iniciar un sitio desde cero, sino migrar el que ya tenemos en wordpress, hicimos un backup del contenido del blog en wordpress, que es descargado en formato xml, el nuestro se llama pythonpiura.wordpress.2016-06-28.xml y las indicaciones para hacerlo son bastante sencillas y estan explicadas en la documentacion del propio wordpress.
Para hacer la migracion de Wordpress a Nikola leimos rapidamente el manual y encontramos que teniamos 3 opciones, probamos las tres para ver cual nos resultaba mejor, pero antes debimos ingresar en la ruta donde tenemos nuestro archivo xml con el backup, debemos mencionar que las tres opciones nos crean una carpeta new_site.&lt;/p&gt;
&lt;p&gt;1-La opcion por defecto:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_229c39baeafe4b069e2cbc5c7e92ca05-1"&gt;&lt;/a&gt;nikola import_wordpress pythonpiura.wordpress.2016-06-28.xml
&lt;/pre&gt;&lt;p&gt;Esta opcion descarga todo el contenido del blog de wordpress e intenta hacer una conversion de cada uno de los posts y paginas al formato .md, no nos funciono correctamente ya que muchos posts se migraron a medias.&lt;/p&gt;
&lt;p&gt;2-Convertir los posts a html:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_a7525f031f1a45fd8545ee445eab460d-1"&gt;&lt;/a&gt;nikola import_wordpress --transform-to-html pythonpiura.wordpress.2016-06-28.xml
&lt;/pre&gt;&lt;p&gt;Para ello primero debemos instalar el plugin de conversion a wordpress&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_8044c036fbbd4b64abf4cd0be5b1a3d6-1"&gt;&lt;/a&gt;nikola plugin -i wordpress_compiler
&lt;/pre&gt;&lt;p&gt;Esta opcion descarga el contenido y convierte los posts y paginas a html, esta fue la opcion que mejor nos funciono, salvo por el problema con los ejemplos de codigo que tenemos y que llevan la etiqueta:&lt;/p&gt;
&lt;pre class="code html"&gt;&lt;a name="rest_code_6a0efff870164395adb02976281dcaf1-1"&gt;&lt;/a&gt;[sourcecode language="language"]
&lt;/pre&gt;&lt;p&gt;Hasta donde hemos visto no es posible llevar a cabo la conversion de esto a un formato adecuado asi que simplemente los deja con el texto normal sin darle ningun formato, por lo que este todavia es un tema pendiente de resolver.&lt;/p&gt;
&lt;p&gt;3-Dejar el contenido como formato de wordpress, los archivos de los posts y las paginas tienen las extension .wp&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_962ea7f845174fec8ee903d56bd3bf24-1"&gt;&lt;/a&gt;nikola import_wordpress --use-wordpress-compiler pythonpiura.wordpress.2016-06-28.xml
&lt;/pre&gt;&lt;p&gt;Probamos esta opcion pensando que nos solucionaria el problema de la etiqueta [sourcecode], pero funciono igual que la opcion anterior y encima debiamos activar el plugin de wordpress en el archivo de configuracion del sitio.&lt;/p&gt;
&lt;p&gt;Como comentamos antes usamos la segunda opcion que nos creo la carpeta new_site con el contenido listo, asi que ahora debiamos construir el sitio:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_9b40ce1bec7347f4ba403a2d26f0a6c9-1"&gt;&lt;/a&gt;nikola build
&lt;/pre&gt;&lt;p&gt;Y lanzar el servidor de pruebas:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_87ce9aec229848a2a9a77a35cea5041e-1"&gt;&lt;/a&gt;nikola serve -b
&lt;/pre&gt;&lt;p&gt;Cambiamos el tema por defecto por uno que nos parecio mas bonito llamado zen, pueden ver mas temas aqui:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://themes.getnikola.com"&gt;https://themes.getnikola.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lo instalamos asi:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_7252803837774d758257c42af1b895dd-1"&gt;&lt;/a&gt;nikola install_theme zen
&lt;/pre&gt;&lt;p&gt;Y lo configuramos en nuestro sitio modificando el archivo conf.py y cambiando la linea:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_78deef8d339c49429ccfd4caaa988e3a-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"bootstrap3"&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;por:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_3c2c3a730f80483ea510416d3d6865d6-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"zen"&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;y la linea:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_10ded3ddc6024ec09b4eb943d80defdb-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;NAVIGATION_LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_10ded3ddc6024ec09b4eb943d80defdb-2"&gt;&lt;/a&gt;        &lt;span class="n"&gt;DEFAULT_LANG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_10ded3ddc6024ec09b4eb943d80defdb-3"&gt;&lt;/a&gt;            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/archive.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Archives"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_10ded3ddc6024ec09b4eb943d80defdb-4"&gt;&lt;/a&gt;            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/categories/index.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Tags"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_10ded3ddc6024ec09b4eb943d80defdb-5"&gt;&lt;/a&gt;            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/rss.xml"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"RSS feed"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_10ded3ddc6024ec09b4eb943d80defdb-6"&gt;&lt;/a&gt;        &lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_10ded3ddc6024ec09b4eb943d80defdb-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Por:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_e298c14f894648dab0433a502512d208-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;NAVIGATION_LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_e298c14f894648dab0433a502512d208-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;DEFAULT_LANG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_e298c14f894648dab0433a502512d208-3"&gt;&lt;/a&gt;        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/index.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Home'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'icon-home'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_e298c14f894648dab0433a502512d208-4"&gt;&lt;/a&gt;        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/archive.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Archives'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'icon-folder-open-alt'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_e298c14f894648dab0433a502512d208-5"&gt;&lt;/a&gt;        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/categories/index.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Tags'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'icon-tags'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_e298c14f894648dab0433a502512d208-6"&gt;&lt;/a&gt;        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/rss.xml'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'RSS'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'icon-rss'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_e298c14f894648dab0433a502512d208-7"&gt;&lt;/a&gt;        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'https://getnikola.com'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'About me'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'icon-user'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_e298c14f894648dab0433a502512d208-8"&gt;&lt;/a&gt;        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'https://twitter.com/getnikola'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'My Twitter'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'icon-twitter'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_e298c14f894648dab0433a502512d208-9"&gt;&lt;/a&gt;        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'https://github.com/getnikola'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'My Github'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'icon-github'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_e298c14f894648dab0433a502512d208-10"&gt;&lt;/a&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_e298c14f894648dab0433a502512d208-11"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Lo anterior es por defecto para que funcione, pero ya luego lo modificamos a nuestro gusto.&lt;/p&gt;
&lt;p&gt;Volvimos a construir nuestro sitio:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_72c235edc1e24a90aa8a284856e99421-1"&gt;&lt;/a&gt;nikola build
&lt;/pre&gt;&lt;p&gt;Y a lanzar nuestro servidor:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_43649b38d7a244d0adc9c8de1f0c22d6-1"&gt;&lt;/a&gt;nikola serve -b
&lt;/pre&gt;&lt;p&gt;Ahora si nos tocaba deployar nuestro sitio en github:&lt;/p&gt;
&lt;p&gt;Para ello creamos un repositorio con el mismo nombre de nuestro usuario "pythonpiura" pero de la siguiente manera:&lt;/p&gt;
&lt;p&gt;pythonpiura.github.io&lt;/p&gt;
&lt;p&gt;Clonamos este repositorio:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_fcbcb7b4c6174d4e8cceb115e233f3b5-1"&gt;&lt;/a&gt;git clone https://github.com/pythonpiura/pythonpiura.github.io.git
&lt;/pre&gt;&lt;p&gt;Lo siguiente que hicimos, fue copiar el contenido de nuestra carpeta new_site en la carpeta del repositorio recien creado.&lt;/p&gt;
&lt;p&gt;Luego procedimos a modificar el archivo conf.py para que tenga los datos de nuetro nuevo sitio, modificando las siguientes lineas:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_c43fd35cac114358b1fb0648c28eabc7-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;SITE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"https://pythonpiura.github.io/"&lt;/span&gt;
&lt;a name="rest_code_c43fd35cac114358b1fb0648c28eabc7-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;BLOG_EMAIL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"pythonpiura@openmailbox.org"&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;y tambien las siguientes para que se deploye correctamente en github:&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_bc1d2772f1c14ca5a768ef2f40d8b906-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;GITHUB_SOURCE_BRANCH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'sources'&lt;/span&gt;
&lt;a name="rest_code_bc1d2772f1c14ca5a768ef2f40d8b906-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;GITHUB_DEPLOY_BRANCH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'master'&lt;/span&gt;
&lt;a name="rest_code_bc1d2772f1c14ca5a768ef2f40d8b906-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;GITHUB_REMOTE_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'origin'&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Agregamos lo siguiente a nuestro archivo .gitignore para que este contenido no sea subido al repositorio:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_7dc565fb29dd450bae839f9ed7c86227-1"&gt;&lt;/a&gt;cache
&lt;a name="rest_code_7dc565fb29dd450bae839f9ed7c86227-2"&gt;&lt;/a&gt;.doit.db
&lt;a name="rest_code_7dc565fb29dd450bae839f9ed7c86227-3"&gt;&lt;/a&gt;__pycache__
&lt;a name="rest_code_7dc565fb29dd450bae839f9ed7c86227-4"&gt;&lt;/a&gt;output
&lt;/pre&gt;&lt;p&gt;Y corremos el comando:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_bc6670ebabda4d79bcee0addda956066-1"&gt;&lt;/a&gt;nikola github_deploy
&lt;/pre&gt;&lt;p&gt;En este paso github nos solicito nuestro usuario y password, lo ingresamos y continuamos. Tardo varios minutos en subir el contenido pero ya con eso tenemos nuestro blog en la siguiente direccion.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pythonpiura.github.io/"&gt;https://pythonpiura.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Saludos.&lt;/p&gt;&lt;/div&gt;</description><guid>http://pythonpiura.org/posts/migrando-de-wordpress-a-nikola/</guid><pubDate>Sat, 02 Jul 2016 05:01:23 GMT</pubDate></item><item><title>IPython y Jupyter</title><link>http://pythonpiura.org/posts/2016/06/18/ipython-y-jupyter/</link><dc:creator>Miguel Amaya</dc:creator><description>&lt;p style="text-align:justify;"&gt;Despues de un receso hemos regresado y esta vez para hablar de IPython y Jupyter, como todos sabemos cuando estamos aprendiendo Python utilizamos el interprete directamente desde una terminal y vamos probando nuestros programas, al principio todo nos va muy bien pero luego notamos que nos vamos quedando cortos, es alli donde aparece &lt;a href="https://ipython.org/"&gt;IPython&lt;/a&gt; que tal como nos dice su pagina web nos provee una arquitectura rica para computación interactiva con:&lt;/p&gt;
&lt;ul&gt;
&lt;li style="text-align:justify;"&gt;Una shell interactiva poderosa.&lt;/li&gt;
&lt;li style="text-align:justify;"&gt;Un nucleo para Jupyter.&lt;/li&gt;
&lt;li style="text-align:justify;"&gt;Soporte para visualización de datos interactivos y uso de herramientas GUI.&lt;/li&gt;
&lt;li style="text-align:justify;"&gt;Interprete embebido flexible para cargar en nuestros propios proyectos.&lt;/li&gt;
&lt;li style="text-align:justify;"&gt;Fácil de usar, herramientas de alta performance para computación paralela.&lt;/li&gt;
&lt;/ul&gt;
&lt;p style="text-align:justify;"&gt;Vamos a instalarlo para ir conociendolo mejor, para ello vamos a &lt;a href="http://rukbottoland.com/blog/tutorial-de-python-virtualenv/"&gt;crear un entorno virtual&lt;/a&gt;, al que llamaremos ipython:&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash"]&lt;br&gt;
virtualenv ipython&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;Lo activamos:&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash"]&lt;br&gt;
source ipython/bin/activate&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;Ahora procedemos a instalar ipython:&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash"]&lt;br&gt;
pip install ipython&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;Para probar que todo ha salido bien ponemos lo siguiente en la terminal:&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash"]&lt;br&gt;
ipython&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;Y nos aparecerá algo como esto, que nos indica que todo esta funcionando correctamente:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pythonpiura.org/2016/06/seleccic3b3n_369.png"&gt;&lt;img class="aligncenter size-large wp-image-295" src="https://pythonpiura.files.wordpress.com/2016/06/seleccic3b3n_369.png?w=604" alt="Selección_369" width="604" height="156"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Escribimos exit para salir del interprete y regresar a nuestra terminal:&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash"]&lt;br&gt;
exit&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;Ahora conozcamos a &lt;a href="http://jupyter.org/"&gt;Jupyter&lt;/a&gt;, tal como nos dice su pagina web, es una aplicación web que permite crear y compartir documentos que contienen código vivo, ecuaciones, visualizaciones y texto explicativo. Se puede usar para simulación numérica, simulación estadística, machine learning y mucho mas.&lt;br&gt;
Vamos a instalarlo para ir conociéndolo:&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash"]&lt;br&gt;
pip install jupyter&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;Para correrlo debemos escribir lo siguiente:&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash"]&lt;br&gt;
ipython notebook&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;Y automáticamente nos abrirá en una pestaña del navegador lo siguiente:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pythonpiura.org/2016/06/seleccic3b3n_370.png"&gt;&lt;img class="aligncenter size-large wp-image-296" src="https://pythonpiura.files.wordpress.com/2016/06/seleccic3b3n_370.png?w=604" alt="Selección_370" width="604" height="230"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;Aqui podemos crear un nuevo notebook, dando click al boton new en la parte superior derecha y seleccionando Python 2:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pythonpiura.org/2016/06/seleccic3b3n_371.png"&gt;&lt;img class="aligncenter size-full wp-image-297" src="http://pythonpiura.org/2016/06/seleccic3b3n_371.png" alt="Selección_371" width="329" height="312"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nos aparece una especie de consola web donde podemos ir escribiendo nuestros programas:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pythonpiura.org/2016/06/seleccic3b3n_373.png"&gt;&lt;img class="aligncenter size-large wp-image-298" src="https://pythonpiura.files.wordpress.com/2016/06/seleccic3b3n_373.png?w=604" alt="Selección_373" width="604" height="135"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Y ejecutando su contenido, como si trabajáramos en nuestra vieja terminal:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pythonpiura.org/2016/06/seleccic3b3n_372.png"&gt;&lt;img class="aligncenter size-large wp-image-299" src="https://pythonpiura.files.wordpress.com/2016/06/seleccic3b3n_372.png?w=604" alt="Selección_372" width="604" height="272"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;Maravilloso verdad, un interprete web, donde vamos escribiendo nuestros programas y viendo su funcionamiento, agregando texto, imagenes, generando graficos, podemos guardar cada noteboook, exportarlo a pdf, intercambiarlo, etc, como veran es una herramienta valiosisima para utilizar en la enseñanza, en el analisis de datos, en los trabajos de investigacion, etc.&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;En la red podemos encontrar una gran de cantidad de notebooks listos para descargar, hay tutoriales, tesis, trabajos de investigacion, etc. A nosotros nos intereso el siguiente curso, que es introductorio al leguaje Python:&lt;br&gt;
&lt;a href="http://ricardoduarte.github.io/python-for-developers/"&gt;Python For Developers&lt;/a&gt;&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;Vamos a descargar el archivo &lt;a href="https://github.com/ricardoduarte/python-for-developers/zipball/master"&gt;zip&lt;/a&gt; conteniendo todos los notebooks y lo guardamos en la ruta desde donde ejecutamos el comando “ipython notebook”, lo descomprimimos y tendremos lo siguiente:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pythonpiura.org/2016/06/seleccic3b3n_375.png"&gt;&lt;img class="aligncenter size-large wp-image-300" src="https://pythonpiura.files.wordpress.com/2016/06/seleccic3b3n_375.png?w=604" alt="Selección_375" width="604" height="163"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Como verán ahora ya nos aparece la carpeta donde esta el curso, ingresamos a ella:&lt;br&gt;
&lt;a href="http://pythonpiura.org/2016/06/seleccic3b3n_376.png"&gt;&lt;img class="aligncenter size-full wp-image-301" src="http://pythonpiura.org/2016/06/seleccic3b3n_376.png" alt="Selección_376" width="451" height="523"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ahora ingresamos a uno de los capítulos:&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;&lt;a href="http://pythonpiura.org/2016/06/seleccic3b3n_378.png"&gt;&lt;img class="aligncenter size-large wp-image-302" src="https://pythonpiura.files.wordpress.com/2016/06/seleccic3b3n_378.png?w=604" alt="Selección_378" width="604" height="205"&gt;&lt;/a&gt;&lt;br&gt;
Seleccionamos el archivo con la extensión “ipynb” y veremos un hermoso curso de introduccion a Python donde podemos ir interactuando con los programas de ejemplo:&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;&lt;a href="http://pythonpiura.org/2016/06/seleccic3b3n_377.png"&gt;&lt;img class="aligncenter size-large wp-image-303" src="https://pythonpiura.files.wordpress.com/2016/06/seleccic3b3n_377.png?w=604" alt="Selección_377" width="604" height="346"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Genial no, ahora aprender Python y hacer demostraciones de código va a ser mas divertido :-)&lt;/p&gt;
&lt;p&gt;Eso es todo por hoy, saludos.&lt;/p&gt;
</description><category>ipython</category><guid>http://pythonpiura.org/posts/2016/06/18/ipython-y-jupyter/</guid><pubDate>Sat, 18 Jun 2016 09:46:26 GMT</pubDate></item><item><title>Reporte PDF en Django con Reportlab</title><link>http://pythonpiura.org/posts/2016/05/13/reporte-pdf-en-django-con-reportlab/</link><dc:creator>Miguel Amaya</dc:creator><description>&lt;p style="text-align:justify;"&gt;Vamos a retomar nuestro proyecto tutorial, al que hemos tenido bastante olvidado estos últimos días y haremos un reporte en pdf utilizando la librería &lt;a href="http://www.reportlab.com/"&gt;reportlab&lt;/a&gt;, para ello la instalamos:&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash"]&lt;br&gt;
pip install reportlab&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;Lo primero que haremos es poner el logo de django en la parte superior de nuestro reporte, por lo que debemos tener la imagen guardada en una ubicación fácil de obtener, por eso crearemos una carpeta llamada “media” en nuestro proyecto y dentro de esta, otra carpeta llamada imagenes, es aquí donde pondremos nuestro archivo logo_django.png:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pythonpiura.org/2016/05/ubicacion_logo.jpg"&gt;&lt;img class="aligncenter size-full wp-image-280" src="http://pythonpiura.org/2016/05/ubicacion_logo.jpg" alt="ubicacion_logo" width="197" height="138"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Modificamos el archivo settings.py para poder establecer la ruta de la carpeta media:&lt;/p&gt;
&lt;p&gt;[sourcecode language="python"]&lt;br&gt;
MEDIA_ROOT = os.path.join(BASE_DIR, ‘media’)&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;Creamos la clase ReportePersonasPDF en el archivo views.py, el código está explicado en los comentarios:&lt;/p&gt;
&lt;p&gt;[sourcecode language="python"]&lt;br&gt;
#Importamos settings para poder tener a la mano la ruta de la carpeta media&lt;br&gt;
from django.conf import settings&lt;br&gt;
from io import BytesIO&lt;br&gt;
from reportlab.pdfgen import canvas&lt;br&gt;
from django.views.generic import View&lt;/p&gt;
&lt;p&gt;class ReportePersonasPDF(View):  &lt;/p&gt;
&lt;p&gt;    def cabecera(self,pdf):&lt;br&gt;
        #Utilizamos el archivo logo_django.png que está guardado en la carpeta media/imagenes&lt;br&gt;
        archivo_imagen = settings.MEDIA_ROOT+’/imagenes/logo_django.png’&lt;br&gt;
        #Definimos el tamaño de la imagen a cargar y las coordenadas correspondientes&lt;br&gt;
        pdf.drawImage(archivo_imagen, 40, 750, 120, 90,preserveAspectRatio=True)                &lt;/p&gt;
&lt;p&gt;    def get(self, request, *args, **kwargs):&lt;br&gt;
        #Indicamos el tipo de contenido a devolver, en este caso un pdf&lt;br&gt;
        response = HttpResponse(content_type=’application/pdf’)&lt;br&gt;
        #La clase io.BytesIO permite tratar un array de bytes como un fichero binario, se utiliza como almacenamiento temporal&lt;br&gt;
        buffer = BytesIO()&lt;br&gt;
        #Canvas nos permite hacer el reporte con coordenadas X y Y&lt;br&gt;
        pdf = canvas.Canvas(buffer)&lt;br&gt;
        #Llamo al método cabecera donde están definidos los datos que aparecen en la cabecera del reporte.&lt;br&gt;
        self.cabecera(pdf)&lt;br&gt;
        #Con show page hacemos un corte de página para pasar a la siguiente&lt;br&gt;
        pdf.showPage()&lt;br&gt;
        pdf.save()&lt;br&gt;
        pdf = buffer.getvalue()&lt;br&gt;
        buffer.close()&lt;br&gt;
        response.write(pdf)&lt;br&gt;
        return response&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;Para poder acceder a esta clase debemos hacer la creación de la url correspondiente en el archivo urls.py:&lt;/p&gt;
&lt;p&gt;[sourcecode language="python"]&lt;br&gt;
url(r’^reporte_personas_pdf/$’,login_required(ReportePersonasPDF.as_view()), name="reporte_personas_pdf"),&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;Ahora vamos a utilizar la url desde el archivo personas.html:&lt;/p&gt;
&lt;p&gt;[sourcecode language="html"]&lt;br&gt;
&amp;lt;div class=’form-group’&amp;gt;&lt;br&gt;
	&amp;lt;div class="row"&amp;gt;&lt;br&gt;
		&amp;lt;div class="col-lg-9"&amp;gt;	&lt;/p&gt;
&lt;p&gt;		&amp;lt;/div&amp;gt;&lt;br&gt;
		&amp;lt;div class="col-lg-1"&amp;gt;&lt;br&gt;
			&amp;lt;a href="{% url ‘personas:reporte_personas_excel’ %}" class="btn btn-info btn-block"&amp;gt;&lt;br&gt;
				&amp;lt;span class="glyphicon glyphicon-list-alt"&amp;gt;&amp;lt;/span&amp;gt;&lt;br&gt;
			&amp;lt;/a&amp;gt;&lt;br&gt;
		&amp;lt;/div&amp;gt;&lt;br&gt;
		{% if perms.personas.add_persona %}&lt;br&gt;
		&amp;lt;div class="col-lg-1"&amp;gt;&lt;br&gt;
			&amp;lt;a href="{% url ‘personas:crear_persona’ %}" class="btn btn-info btn-block"&amp;gt;&lt;br&gt;
				&amp;lt;span class="glyphicon glyphicon-plus"&amp;gt;&amp;lt;/span&amp;gt;&lt;br&gt;
			&amp;lt;/a&amp;gt;&lt;br&gt;
		&amp;lt;/div&amp;gt;&lt;br&gt;
		{% endif %}&lt;br&gt;
		&amp;lt;div class="col-lg-1"&amp;gt;&lt;br&gt;
			&amp;lt;a href="{% url ‘personas:reporte_personas_pdf’ %}" class="btn btn-info btn-block"&amp;gt;&lt;br&gt;
				&amp;lt;span class="glyphicon glyphicon-file"&amp;gt;&amp;lt;/span&amp;gt;&lt;br&gt;
			&amp;lt;/a&amp;gt;&lt;br&gt;
		&amp;lt;/div&amp;gt;&lt;br&gt;
	&amp;lt;/div&amp;gt;&lt;br&gt;
&amp;lt;/div&amp;gt;&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;Nos tiene que aparecer un ícono de un archivo:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pythonpiura.org/2016/05/personas_pdf.jpg"&gt;&lt;img class="aligncenter size-large wp-image-281" src="https://pythonpiura.files.wordpress.com/2016/05/personas_pdf.jpg?w=604" alt="personas_pdf" width="604" height="119"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;El primer resultado será este:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pythonpiura.org/2016/05/reporte_pdf1.jpg"&gt;&lt;img class="aligncenter size-large wp-image-282" src="https://pythonpiura.files.wordpress.com/2016/05/reporte_pdf1.jpg?w=604" alt="reporte_pdf1" width="604" height="220"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;Vamos a ponerle un encabezado a nuestro reporte que diga “Python Piura” y debajo “Reporte de Personas”, para ello colocamos el siguiente código debajo de la última linea del método “cabecera”:&lt;/p&gt;
&lt;p&gt;[sourcecode language="python"]&lt;br&gt;
        #Establecemos el tamaño de letra en 16 y el tipo de letra Helvetica&lt;br&gt;
        pdf.setFont("Helvetica", 16)&lt;br&gt;
        #Dibujamos una cadena en la ubicación X,Y especificada&lt;br&gt;
        pdf.drawString(230, 790, u"PYTHON PIURA")&lt;br&gt;
        pdf.setFont("Helvetica", 14)&lt;br&gt;
        pdf.drawString(200, 770, u"REPORTE DE PERSONAS")&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pythonpiura.org/2016/05/reporte_pdf2.jpg"&gt;&lt;img class="aligncenter size-large wp-image-283" src="https://pythonpiura.files.wordpress.com/2016/05/reporte_pdf2.jpg?w=604" alt="reporte_pdf2" width="604" height="155"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;Visualizaremos la tabla de personas, por lo que creamos el método tabla en la clase ReportePersonasPDF:&lt;/p&gt;
&lt;p&gt;[sourcecode language="python"]&lt;br&gt;
def tabla(self,pdf,y):&lt;br&gt;
        #Creamos una tupla de encabezados para neustra tabla&lt;br&gt;
        encabezados = (‘DNI’, ‘Nombre’, ‘Apellido Paterno’, ‘Apellido Materno’)&lt;br&gt;
        #Creamos una lista de tuplas que van a contener a las personas&lt;br&gt;
        detalles = [(persona.dni, persona.nombre, persona.apellido_paterno, persona.apellido_materno) for persona in Persona.objects.all()]&lt;br&gt;
        #Establecemos el tamaño de cada una de las columnas de la tabla&lt;br&gt;
        detalle_orden = Table([encabezados] + detalles, colWidths=[2 * cm, 5 * cm, 5 * cm, 5 * cm])&lt;br&gt;
        #Aplicamos estilos a las celdas de la tabla&lt;br&gt;
        detalle_orden.setStyle(TableStyle(&lt;br&gt;
            [&lt;br&gt;
                #La primera fila(encabezados) va a estar centrada&lt;br&gt;
                ('ALIGN',(0,0),(3,0),'CENTER'),&lt;br&gt;
                #Los bordes de todas las celdas serán de color negro y con un grosor de 1&lt;br&gt;
                ('GRID', (0, 0), (-1, -1), 1, colors.black),&lt;br&gt;
                #El tamaño de las letras de cada una de las celdas será de 10&lt;br&gt;
                ('FONTSIZE', (0, 0), (-1, -1), 10),&lt;br&gt;
            ]&lt;br&gt;
        ))&lt;br&gt;
        #Establecemos el tamaño de la hoja que ocupará la tabla&lt;br&gt;
        detalle_orden.wrapOn(pdf, 800, 600)&lt;br&gt;
        #Definimos la coordenada donde se dibujará la tabla&lt;br&gt;
        detalle_orden.drawOn(pdf, 60,y)&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;Veamos como queda nuestro método get ahora con la nueva llamada al método tabla:&lt;/p&gt;
&lt;p&gt;[sourcecode language="python"]&lt;br&gt;
def get(self, request, *args, **kwargs):&lt;br&gt;
        #Indicamos el tipo de contenido a devolver, en este caso un pdf&lt;br&gt;
        response = HttpResponse(content_type=’application/pdf’)&lt;br&gt;
        #La clase io.BytesIO permite tratar un array de bytes como un fichero binario, se utiliza como almacenamiento temporal&lt;br&gt;
        buffer = BytesIO()&lt;br&gt;
        #Canvas nos permite hacer el reporte con coordenadas X y Y&lt;br&gt;
        pdf = canvas.Canvas(buffer)&lt;br&gt;
        #Llamo al método cabecera donde están definidos los datos que aparecen en la cabecera del reporte.&lt;br&gt;
        self.cabecera(pdf)&lt;br&gt;
        y = 600&lt;br&gt;
        self.tabla(pdf, y)&lt;br&gt;
        #Con show page hacemos un corte de página para pasar a la siguiente&lt;br&gt;
        pdf.showPage()&lt;br&gt;
        pdf.save()&lt;br&gt;
        pdf = buffer.getvalue()&lt;br&gt;
        buffer.close()&lt;br&gt;
        response.write(pdf)&lt;br&gt;
        return response&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;Y este será el resultado final:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pythonpiura.org/2016/05/reporte_pdf3.jpg"&gt;&lt;img class="aligncenter size-large wp-image-285" src="https://pythonpiura.files.wordpress.com/2016/05/reporte_pdf3.jpg?w=604" alt="reporte_pdf3" width="604" height="379"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Eso es todo por hoy.&lt;br&gt;
Saludos.&lt;/p&gt;
</description><category>Django</category><category>Python</category><category>reportlab</category><guid>http://pythonpiura.org/posts/2016/05/13/reporte-pdf-en-django-con-reportlab/</guid><pubDate>Sat, 14 May 2016 02:58:34 GMT</pubDate></item><item><title>Consulta DNI - RENIEC</title><link>http://pythonpiura.org/posts/2016/05/11/consulta-dni-reniec/</link><dc:creator>Miguel Amaya</dc:creator><description>&lt;p style="text-align:justify;"&gt;En esta oportunidad vamos a hacer un ejemplo mas complejo, ya que el captcha así lo amerita, nuestra página objetivo es la siguiente:&lt;br&gt;
&lt;a href="https://cel.reniec.gob.pe/valreg/valreg.do"&gt;https://cel.reniec.gob.pe/valreg/valreg.do&lt;/a&gt;&lt;br&gt;
&lt;a href="http://pythonpiura.org/2016/05/reniec.jpg"&gt;&lt;img class="aligncenter size-full wp-image-274" src="http://pythonpiura.org/2016/05/reniec.jpg" alt="reniec" width="579" height="396"&gt;&lt;/a&gt;&lt;br&gt;
En esta página podemos ingresar el número de DNI y obtener el nombre completo del ciudadano. Como se ve en la imagen aquí nos enfrentamos a un captcha mas completo y a un teclado dinámico compuesto de botones, para romper este captcha tenemos que modificar la imagen para obtener el texto correcto, eliminando las lineas que atraviesan las letras y que tienen una tonalidad distinta de azul, el proceso no será 100% seguro pero funciona en la mayoría de los casos:&lt;/p&gt;
&lt;p&gt;[sourcecode language="python"]&lt;br&gt;
# -*- coding: utf-8 -*-&lt;br&gt;
from selenium import webdriver&lt;br&gt;
from selenium.webdriver.common.by import By&lt;br&gt;
from selenium.webdriver.support.wait import WebDriverWait&lt;br&gt;
from selenium.webdriver.support import expected_conditions as EC&lt;/p&gt;
&lt;p&gt;try:&lt;br&gt;
    import Image&lt;br&gt;
except ImportError:&lt;br&gt;
    from PIL import Image&lt;br&gt;
import pytesseract&lt;/p&gt;
&lt;p&gt;def ir_reniec_web(dni):&lt;br&gt;
    fp = webdriver.FirefoxProfile()&lt;br&gt;
    driver = webdriver.Firefox(fp)&lt;br&gt;
    #Definimos nuestra página objetivo&lt;br&gt;
    driver.get("https://cel.reniec.gob.pe/valreg/valreg.do")&lt;br&gt;
    try:&lt;br&gt;
        #Esperamos hasta que se cargue la imagen con el captcha&lt;br&gt;
        WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.ID, "imagcodigo")))&lt;br&gt;
    except:&lt;br&gt;
        print "Element is not present"&lt;br&gt;
    #Hacemos la captura de pantalla correspondiente&lt;br&gt;
    driver.save_screenshot("screenshot.png")&lt;br&gt;
    img=Image.open(‘screenshot.png’)&lt;br&gt;
    #Obtenemos el ancho y el largo de la imagen&lt;br&gt;
    ancho = img.size[0]&lt;br&gt;
    alto = img.size[1]&lt;br&gt;
    #Recortamos la parte del captcha teniendo en cuenta el ancho y el largo de la imagen&lt;br&gt;
    img_recortada = img.crop((int(ancho/4.26),int(alto/3.64),int(ancho/2.8),int(alto/3)))&lt;br&gt;
    #Guardamos el recorte&lt;br&gt;
    img_recortada.save("recorte.png")&lt;br&gt;
    #Recorremos cada uno de los dígitos del DNI&lt;br&gt;
    for num in dni:&lt;br&gt;
        #Buscamos el boton que tenga como nombre tecla_0&lt;br&gt;
        boton_0 = driver.find_element_by_name("tecla_0")&lt;br&gt;
        #Obtenemos el valor del botón con nombre tecla_0&lt;br&gt;
        valor_0 = boton_0.get_attribute(‘value’)&lt;br&gt;
        #Buscamos el boton que tenga como nombre tecla_1&lt;br&gt;
        boton_1 = driver.find_element_by_name("tecla_1")&lt;br&gt;
        #Obtenemos el valor del botón con nombre tecla_1&lt;br&gt;
        valor_1 = boton_1.get_attribute(‘value’)&lt;br&gt;
        #Buscamos el boton que tenga como nombre tecla_2&lt;br&gt;
        boton_2 = driver.find_element_by_name("tecla_2")&lt;br&gt;
        #Obtenemos el valor del botón con nombre tecla_2&lt;br&gt;
        valor_2 = boton_2.get_attribute(‘value’)&lt;br&gt;
        #Buscamos el boton que tenga como nombre tecla_3&lt;br&gt;
        boton_3 = driver.find_element_by_name("tecla_3")&lt;br&gt;
        #Obtenemos el valor del botón con nombre tecla_3&lt;br&gt;
        valor_3 = boton_3.get_attribute(‘value’)&lt;br&gt;
        #Buscamos el boton que tenga como nombre tecla_4&lt;br&gt;
        boton_4 = driver.find_element_by_name("tecla_4")&lt;br&gt;
        #Obtenemos el valor del botón con nombre tecla_4&lt;br&gt;
        valor_4 = boton_4.get_attribute(‘value’)&lt;br&gt;
        #Buscamos el boton que tenga como nombre tecla_5&lt;br&gt;
        boton_5 = driver.find_element_by_name("tecla_5")&lt;br&gt;
        #Obtenemos el valor del botón con nombre tecla_5&lt;br&gt;
        valor_5 = boton_5.get_attribute(‘value’)&lt;br&gt;
        #Buscamos el boton que tenga como nombre tecla_6&lt;br&gt;
        boton_6 = driver.find_element_by_name("tecla_6")&lt;br&gt;
        #Obtenemos el valor del botón con nombre tecla_6&lt;br&gt;
        valor_6 = boton_6.get_attribute(‘value’)&lt;br&gt;
        #Buscamos el boton que tenga como nombre tecla_7&lt;br&gt;
        boton_7 = driver.find_element_by_name("tecla_7")&lt;br&gt;
        #Obtenemos el valor del botón con nombre tecla_7&lt;br&gt;
        valor_7 = boton_7.get_attribute(‘value’)&lt;br&gt;
        #Buscamos el boton que tenga como nombre tecla_8&lt;br&gt;
        boton_8 = driver.find_element_by_name("tecla_8")&lt;br&gt;
        #Obtenemos el valor del botón con nombre tecla_8&lt;br&gt;
        valor_8 = boton_8.get_attribute(‘value’)&lt;br&gt;
        #Buscamos el boton que tenga como nombre tecla_9&lt;br&gt;
        boton_9 = driver.find_element_by_name("tecla_9")&lt;br&gt;
        #Obtenemos el valor del botón con nombre tecla_9&lt;br&gt;
        valor_9 = boton_9.get_attribute(‘value’)&lt;br&gt;
        ”’Consultamos si el dígito del DNI es igual al valor del botón,&lt;br&gt;
        si es el caso entonces se da click en ese botón”’&lt;br&gt;
        if num==valor_0:&lt;br&gt;
            boton_0.click()&lt;br&gt;
        elif num==valor_1:&lt;br&gt;
            boton_1 = driver.find_element_by_name("tecla_1")&lt;br&gt;
            boton_1.click()&lt;br&gt;
        elif num==valor_2:&lt;br&gt;
            boton_2 = driver.find_element_by_name("tecla_2")&lt;br&gt;
            boton_2.click()&lt;br&gt;
        elif num==valor_3:&lt;br&gt;
            boton_3 = driver.find_element_by_name("tecla_3")&lt;br&gt;
            boton_3.click()&lt;br&gt;
        elif num==valor_4:&lt;br&gt;
            boton_4 = driver.find_element_by_name("tecla_4")&lt;br&gt;
            boton_4.click()&lt;br&gt;
        elif num==valor_5:&lt;br&gt;
            boton_5 = driver.find_element_by_name("tecla_5")&lt;br&gt;
            boton_5.click()&lt;br&gt;
        elif num==valor_6:&lt;br&gt;
            boton_6 = driver.find_element_by_name("tecla_6")&lt;br&gt;
            boton_6.click()&lt;br&gt;
        elif num==valor_7:&lt;br&gt;
            boton_7 = driver.find_element_by_name("tecla_7")&lt;br&gt;
            boton_7.click()&lt;br&gt;
        elif num==valor_8:&lt;br&gt;
            boton_8 = driver.find_element_by_name("tecla_8")&lt;br&gt;
            boton_8.click()&lt;br&gt;
        elif num==valor_9:&lt;br&gt;
            boton_9 = driver.find_element_by_name("tecla_9")&lt;br&gt;
            boton_9.click()&lt;br&gt;
    #Se llama al método romper_captcha para obtener el texto correspondiente&lt;br&gt;
    captcha = romper_captcha("recorte.png")&lt;br&gt;
    try:&lt;br&gt;
        #Obtenemos la caja de texto donde se escribe el texto del captcha&lt;br&gt;
        codigo = driver.find_element_by_name("imagen")&lt;br&gt;
        #Si el captcha está vacio o no se ha logrado romper se cierra el navegador y se termina la aplicación&lt;br&gt;
        if captcha==”:&lt;br&gt;
            driver.close()&lt;br&gt;
            return&lt;br&gt;
        #Escribimos el texto&lt;br&gt;
        codigo.send_keys(captcha)&lt;br&gt;
    except:&lt;br&gt;
        pass&lt;br&gt;
    try:&lt;br&gt;
        #Obtenemos el botón de consulta&lt;br&gt;
        boton_consultar=driver.find_element_by_name("bot_consultar")&lt;br&gt;
        #Damos click al botón de consulta&lt;br&gt;
        boton_consultar.click()&lt;br&gt;
    except:&lt;br&gt;
        print "Element is not present"&lt;br&gt;
    #Obtengo el resultado que aparece en el elemento llamado style2&lt;br&gt;
    resultado = driver.find_element_by_class_name("style2")&lt;br&gt;
    #Partimos el resultado para obtener el nombre&lt;br&gt;
    nombre = resultado.text.split(‘\n’)&lt;br&gt;
    driver.close()&lt;br&gt;
    return nombre[0]&lt;/p&gt;
&lt;p&gt;def romper_captcha(nombre_imagen):&lt;br&gt;
    #Abro la imagen&lt;br&gt;
    img = Image.open(nombre_imagen)&lt;br&gt;
    #Obtengo un arreglo de píxeles de la imagen&lt;br&gt;
    pixdata = img.load()&lt;br&gt;
    ”’Modifico los píxeles de la imagen de acuerdo al análisis de los colores de las letras&lt;br&gt;
    y las lineas que cruzan el texto, pintando de negro los píxeles del texto y de blanco las lineas”’&lt;br&gt;
    for y in xrange(img.size[1]):&lt;br&gt;
        for x in xrange(img.size[0]):&lt;br&gt;
            if pixdata[x, y][2] &amp;lt; 146: pixdata[x, y] = (255, 255, 255) for y in xrange(img.size[1]): for x in xrange(img.size[0]): if pixdata[x, y][1] &amp;gt; 64:&lt;br&gt;
                pixdata[x, y] = (255, 255, 255)&lt;br&gt;
            else:&lt;br&gt;
                pixdata[x, y] = (0,0,0)&lt;br&gt;
    #Guardo la imagen modificada&lt;br&gt;
    img.save("modificado.jpg")&lt;br&gt;
    #Abro la imagen modificado&lt;br&gt;
    image = Image.open("modificado.jpg")&lt;br&gt;
    #Obtenemos el texto de la imagen&lt;br&gt;
    frase = pytesseract.image_to_string(image)&lt;br&gt;
    #Retornamos el texto eliminado los espacios en blanco entre las palabras y convirtiendolas en mayúsculas&lt;br&gt;
    return frase.replace(‘ ‘,”).upper()&lt;/p&gt;
&lt;p&gt;def main():&lt;br&gt;
    dni = ’123456789′&lt;br&gt;
    print ir_reniec_web(dni)&lt;/p&gt;
&lt;p&gt;main()&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;Espero que les sea útil.&lt;br&gt;
Saludos.&lt;/p&gt;
</description><category>pillow</category><category>pytesseract</category><category>Python</category><category>Selenium</category><guid>http://pythonpiura.org/posts/2016/05/11/consulta-dni-reniec/</guid><pubDate>Thu, 12 May 2016 02:37:08 GMT</pubDate></item><item><title>Otro Ejemplo de Web Scrapping con Python</title><link>http://pythonpiura.org/posts/2016/05/10/otro-ejemplo-de-web-scrapping-con-python/</link><dc:creator>Miguel Amaya</dc:creator><description>&lt;p style="text-align:justify;"&gt;En esta oportunidad vamos a compartir con ustedes un nuevo script para consultar rucs de manera masiva a partir del DNI en la página web de sunat, esto ha sido un poco mas complejo debido a que la página en cuestión usa frames, también hemos mejorado un poquito el problema de los tamaños haciendo el recorte a partir del tamaño de la captura de pantalla:&lt;/p&gt;
&lt;p&gt;[sourcecode language="python"]&lt;br&gt;
# -*- coding: utf-8 -*-&lt;br&gt;
from selenium import webdriver&lt;br&gt;
from selenium.webdriver.common.by import By&lt;br&gt;
from selenium.webdriver.support.wait import WebDriverWait&lt;br&gt;
from selenium.webdriver.support import expected_conditions as EC&lt;br&gt;
try:&lt;br&gt;
    import Image&lt;br&gt;
except ImportError:&lt;br&gt;
    from PIL import Image&lt;br&gt;
import pytesseract&lt;/p&gt;
&lt;p&gt;def ir_sunat_web(dni):&lt;br&gt;
    driver = webdriver.Firefox()&lt;br&gt;
    #Fijamos nuestra página objetivo&lt;br&gt;
    driver.get("http://ww1.sunat.gob.pe/cl-ti-itmrconsruc/jcrS00Alias")&lt;br&gt;
    try:&lt;br&gt;
        #Debido a que la página tiene frames debemos hacer el cambio al frame con nombre "leftFrame"&lt;br&gt;
        driver.switch_to_frame("leftFrame")&lt;br&gt;
    except:&lt;br&gt;
        return []&lt;br&gt;
        driver.close()&lt;br&gt;
    try:&lt;br&gt;
        #Obtenemos los radio buttons que nos permiten seleccionar el tipo de búsqueda a hacer&lt;br&gt;
        radios = driver.find_elements_by_name("tQuery")&lt;br&gt;
        #Seleccionamos la búsqueda por DNI&lt;br&gt;
        radios[1].click()&lt;br&gt;
        #Obtenemos la caja de texto donde se ingresa el DNI&lt;br&gt;
        documento = driver.find_element_by_name("search2")&lt;br&gt;
        #Escribimos el DNI&lt;br&gt;
        documento.send_keys(dni)&lt;br&gt;
        #Esperamos hasta que el texto esté escrito en la caja de texto del DNI&lt;br&gt;
        WebDriverWait(driver, 5).until(EC.text_to_be_present_in_element_value((By.NAME, "search2"),dni))&lt;br&gt;
    except:&lt;br&gt;
        driver.close()&lt;br&gt;
        return []&lt;br&gt;
    try:&lt;br&gt;
        #Esperamos hasta que se cargue la imagen con el captcha&lt;br&gt;
        WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.NAME, "imagen")))&lt;br&gt;
        #Hacemos la captura de pantalla correspondiente&lt;br&gt;
        driver.save_screenshot("screenshot.jpg")&lt;br&gt;
        img=Image.open(‘screenshot.jpg’)&lt;br&gt;
        #Obtenemos el ancho y el largo de la imagen&lt;br&gt;
        ancho = img.size[0]&lt;br&gt;
        alto = img.size[1]&lt;br&gt;
        #Recortamos la parte del captcha teniendo en cuenta el ancho y el largo de la imagen&lt;br&gt;
        img_recortada = img.crop((ancho/1.4,alto/20,ancho/1.25,alto/6.9))&lt;br&gt;
        #Guardamos el recorte&lt;br&gt;
        img_recortada.save("recorte.jpg")&lt;br&gt;
        #Obtenemos el texto del captcha&lt;br&gt;
        captcha = pytesseract.image_to_string(img_recortada)&lt;br&gt;
        #Obtenemos la caja de texto donde se escribe el texto del captcha&lt;br&gt;
        codigo = driver.find_element_by_name("codigo")&lt;br&gt;
        #Escribimos el texto&lt;br&gt;
        codigo.send_keys(captcha)&lt;br&gt;
    except:&lt;br&gt;
        driver.close()&lt;br&gt;
        return []&lt;br&gt;
    try:&lt;br&gt;
        #Obtenemos el botón de búsqueda&lt;br&gt;
        boton = driver.find_element_by_class_name("form-button")&lt;br&gt;
        #Damos click al botón de búsqueda&lt;br&gt;
        boton.click()&lt;br&gt;
        #Cambiamos al frame por defecto&lt;br&gt;
        driver.switch_to_default_content()&lt;br&gt;
        #Cambiamos al frame llamado "mainFrame" que contiene la tabla de resultados con un enlace conteniendo el ruc&lt;br&gt;
        driver.switch_to_frame("mainFrame")&lt;br&gt;
    except:&lt;br&gt;
        driver.close()&lt;br&gt;
        return []&lt;br&gt;
    try:&lt;br&gt;
        #Esperamos que se cargue la tabla de resultados&lt;br&gt;
        WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.CLASS_NAME, "form-table")))&lt;br&gt;
        #Obtenemos el enlace que contiene al RUC&lt;br&gt;
        enlace=driver.find_element(By.TAG_NAME,"a")&lt;br&gt;
        #Le damos click al enlace&lt;br&gt;
        enlace.click()&lt;br&gt;
        #Ahora si tenemos una tabla que contiene el detalle de los resultados del RUC consultado&lt;br&gt;
        #Obtenemos todas las filas&lt;br&gt;
        trs = driver.find_elements(By.TAG_NAME, "tr")&lt;br&gt;
        #Obtenemos las celdas de la primera fila&lt;br&gt;
        tds = trs[0].find_elements(By.TAG_NAME, "td")&lt;br&gt;
        #A la segunda celda la partimos ya que tiene el ruc y la razón social separados por un guión&lt;br&gt;
        primera_linea = tds[1].text.split(‘-’)&lt;br&gt;
        ruc = primera_linea[0].strip()&lt;br&gt;
        razon_social = primera_linea[1].strip()&lt;br&gt;
        #Obtenemos la segunda linea que tiene el tipo de contribuyente&lt;br&gt;
        tds = trs[1].find_elements(By.TAG_NAME, "td")&lt;br&gt;
        tipo_contribuyente = tds[1].text.strip()&lt;br&gt;
        #Obtenemos la dirección&lt;br&gt;
        tds = trs[7].find_elements(By.TAG_NAME, "td")&lt;br&gt;
        direccion = tds[1].text.strip()&lt;br&gt;
    except:&lt;br&gt;
        driver.close()&lt;br&gt;
        return []&lt;br&gt;
    driver.close()&lt;br&gt;
    #Devolvemos una lista con los resultados.&lt;br&gt;
    datos = [ruc,razon_social,tipo_contribuyente,direccion]&lt;br&gt;
    return datos    &lt;/p&gt;
&lt;p&gt;def main():&lt;br&gt;
    #Ingresar DNI&lt;br&gt;
    dni = ’12345678′&lt;br&gt;
    print ir_sunat_web(dni)&lt;/p&gt;
&lt;p&gt;main()&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;http://www.youtube.com/watch?v=ijICFYtAuDE&lt;/p&gt;
&lt;p&gt;Esperamos que les sea útil.&lt;br&gt;
Saludos.&lt;/p&gt;
</description><category>Django</category><category>pytesseract</category><category>Selenium</category><guid>http://pythonpiura.org/posts/2016/05/10/otro-ejemplo-de-web-scrapping-con-python/</guid><pubDate>Wed, 11 May 2016 04:35:39 GMT</pubDate></item><item><title>Fotos Charla Web Scrapping con Python y Selenium</title><link>http://pythonpiura.org/posts/2016/05/09/fotos-charla-web-scrapping-con-python-y-selenium/</link><dc:creator>Miguel Amaya</dc:creator><description>&lt;p&gt;&lt;a href="http://pythonpiura.org/2016/05/p5070212.jpg"&gt;&lt;img src="https://pythonpiura.files.wordpress.com/2016/05/p5070212.jpg?w=604" alt="P5070212" width="604" height="453" class="aligncenter size-large wp-image-259"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[caption id="attachment_264" align="aligncenter" width="604"]&lt;a href="http://pythonpiura.org/2016/05/p5070204.jpg"&gt;&lt;img src="https://pythonpiura.files.wordpress.com/2016/05/p5070204.jpg?w=604" alt="OLYMPUS DIGITAL CAMERA" width="604" height="453" class="size-large wp-image-264"&gt;&lt;/a&gt; OLYMPUS DIGITAL CAMERA[/caption]&lt;/p&gt;
&lt;p&gt;[caption id="attachment_263" align="aligncenter" width="604"]&lt;a href="http://pythonpiura.org/2016/05/p5070208.jpg"&gt;&lt;img src="https://pythonpiura.files.wordpress.com/2016/05/p5070208.jpg?w=604" alt="OLYMPUS DIGITAL CAMERA" width="604" height="453" class="size-large wp-image-263"&gt;&lt;/a&gt; OLYMPUS DIGITAL CAMERA[/caption]&lt;/p&gt;
&lt;p&gt;[caption id="attachment_262" align="aligncenter" width="604"]&lt;a href="http://pythonpiura.org/2016/05/p5070209.jpg"&gt;&lt;img src="https://pythonpiura.files.wordpress.com/2016/05/p5070209.jpg?w=604" alt="OLYMPUS DIGITAL CAMERA" width="604" height="453" class="size-large wp-image-262"&gt;&lt;/a&gt; OLYMPUS DIGITAL CAMERA[/caption]&lt;/p&gt;
&lt;p&gt;[caption id="attachment_261" align="aligncenter" width="604"]&lt;a href="http://pythonpiura.org/2016/05/p5070210.jpg"&gt;&lt;img src="https://pythonpiura.files.wordpress.com/2016/05/p5070210.jpg?w=604" alt="OLYMPUS DIGITAL CAMERA" width="604" height="453" class="size-large wp-image-261"&gt;&lt;/a&gt; OLYMPUS DIGITAL CAMERA[/caption]&lt;/p&gt;
&lt;p&gt;[caption id="attachment_260" align="aligncenter" width="604"]&lt;a href="http://pythonpiura.org/2016/05/p5070211.jpg"&gt;&lt;img src="https://pythonpiura.files.wordpress.com/2016/05/p5070211.jpg?w=604" alt="OLYMPUS DIGITAL CAMERA" width="604" height="453" class="size-large wp-image-260"&gt;&lt;/a&gt; OLYMPUS DIGITAL CAMERA[/caption]&lt;/p&gt;
</description><category>Círculo</category><guid>http://pythonpiura.org/posts/2016/05/09/fotos-charla-web-scrapping-con-python-y-selenium/</guid><pubDate>Mon, 09 May 2016 20:52:18 GMT</pubDate></item><item><title>Web Scrapping con Python y Selenium</title><link>http://pythonpiura.org/posts/2016/05/07/web-scrapping-con-python-y-selenium/</link><dc:creator>Miguel Amaya</dc:creator><description>&lt;p style="text-align:justify;"&gt;El día de hoy tuvimos el agrado de ser invitados por el &lt;a href="https://cideuel.wordpress.com/"&gt;Círculo UEL&lt;/a&gt; a dar una charla en el marco del FLISOL 2016 en la Universidad Los Ángeles de Chimbote Sede Piura y el tema fue Web Scrapping con Python y Selenium, hicimos algunos ejemplos muy interesantes y nos encantó la acogida del público y el interés suscitado, vamos a compartir los artículos que usamos:&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;&lt;a href="https://pythonpiura.wordpress.com/2014/09/18/selenium-con-python/"&gt;Selenium con Python&lt;/a&gt;&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;&lt;a href="https://pythonpiura.wordpress.com/2016/01/26/romper-captchas-con-pytesseract-y-selenium/"&gt;Romper Captchas con Pytesseract y Selenium&lt;/a&gt;&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;Las diapositivas:&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;&lt;a href="http://pythonpiura.org/2016/05/charlapythonflisol2016.pdf"&gt;Descargar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;El script que fue la estrella de la mañana:&lt;/p&gt;
&lt;p&gt;[sourcecode language="python"]&lt;br&gt;
# -*- coding: utf-8 -*-&lt;br&gt;
from selenium import webdriver&lt;br&gt;
from selenium.webdriver.common.by import By&lt;br&gt;
from selenium.webdriver.support.wait import WebDriverWait&lt;br&gt;
from selenium.webdriver.support import expected_conditions as EC&lt;br&gt;
import os&lt;/p&gt;
&lt;p&gt;try:&lt;br&gt;
    import Image&lt;br&gt;
except ImportError:&lt;br&gt;
    from PIL import Image&lt;br&gt;
import pytesseract&lt;/p&gt;
&lt;p&gt;def decodifica_campo(campo):&lt;br&gt;
	return u"%s" % campo&lt;/p&gt;
&lt;p&gt;def ir_sunat_web(ruta):&lt;br&gt;
	fp = webdriver.FirefoxProfile()&lt;br&gt;
	fp.set_preference("browser.download.manager.showWhenStarting",False)&lt;br&gt;
	fp.set_preference("browser.download.manager.closeWhenDone", True);&lt;br&gt;
	fp.set_preference("browser.download.manager.showAlertOnComplete", False);&lt;br&gt;
	fp.set_preference("browser.helperApps.neverAsk.saveToDisk", "application/zip");&lt;br&gt;
	driver = webdriver.Firefox(fp)&lt;br&gt;
	driver.get("http://www.sunat.gob.pe/cl-ti-itmrconsmulruc/jrmS00Alias")&lt;br&gt;
	try:&lt;br&gt;
		WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.NAME, "imagen")))&lt;br&gt;
	except:&lt;br&gt;
		print "No carga imagen"&lt;br&gt;
	driver.save_screenshot("screenshot.png")&lt;br&gt;
	img=Image.open(‘screenshot.png’)&lt;br&gt;
	img_recortada = img.crop((700,309,800,361))&lt;br&gt;
	img_recortada.save("recorte.png")&lt;br&gt;
        try:&lt;br&gt;
            captcha = pytesseract.image_to_string(img_recortada)&lt;br&gt;
            codigo = driver.find_element_by_name("codigoA")&lt;br&gt;
            codigo.send_keys(captcha)&lt;br&gt;
        except:&lt;br&gt;
            pass&lt;br&gt;
	archivo = driver.find_element_by_name("archivo")&lt;br&gt;
	archivo.send_keys(ruta)&lt;br&gt;
	form = driver.find_element_by_name("frmConsMulRucArchivo")&lt;br&gt;
	botones=form.find_elements_by_class_name("form-button")&lt;br&gt;
	botones[1].click()&lt;br&gt;
	try:&lt;br&gt;
		WebDriverWait(driver, 5).until(EC.presence_of_all_elements_located((By.CLASS_NAME, "form-table")))&lt;br&gt;
		enlace=driver.find_element(By.TAG_NAME,"a")&lt;br&gt;
		enlace.click()&lt;br&gt;
	except:&lt;br&gt;
		print "Element is not present"&lt;br&gt;
	driver.close()&lt;/p&gt;
&lt;p&gt;def main():&lt;br&gt;
	ruta = "/home/usuario/carpeta"&lt;br&gt;
	ruta_archivo=os.path.join(ruta,"rucs.zip")&lt;br&gt;
	ir_sunat_web(ruta_archivo)&lt;/p&gt;
&lt;p&gt;main()&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;Así como también un vídeo de su funcionamiento.&lt;/p&gt;
&lt;p&gt;http://www.youtube.com/watch?v=mUaVFYTlibM&lt;/p&gt;
&lt;p&gt;Saludos y muchas gracias.&lt;/p&gt;
</description><category>pillow</category><category>pytesseract</category><category>Python</category><category>Selenium</category><guid>http://pythonpiura.org/posts/2016/05/07/web-scrapping-con-python-y-selenium/</guid><pubDate>Sun, 08 May 2016 01:58:06 GMT</pubDate></item><item><title>Personalizando Permisos</title><link>http://pythonpiura.org/posts/2016/05/02/personalizando-permisos/</link><dc:creator>Miguel Amaya</dc:creator><description>&lt;p style="text-align:justify;"&gt;Hasta ahora hemos trabajado con los permisos básicos que nos proporciona Django de manera automática, pero que pasa si nosotros quisieramos restringir cosas mas al detalle, por ejemplo que un usuario determinado no vea el detalle de la persona, o la tabla que lista a todas las personas, o que no pueda exportar a una hoja de cálculo.&lt;br&gt;
Empecemos por lo mas sencillo, creemos un permiso para restringir el acceso al detalle de la persona, para ello personalizaremos los permisos en el modelo, de la siguiente manera:&lt;/p&gt;
&lt;p&gt;models.py&lt;/p&gt;
&lt;p&gt;[sourcecode language="python"]&lt;br&gt;
from django.db import models&lt;/p&gt;
&lt;p&gt;# Create your models here.&lt;br&gt;
class Persona(models.Model):&lt;br&gt;
    dni= models.CharField(primary_key=True,max_length=8)&lt;br&gt;
    nombre = models.CharField(max_length=100)&lt;br&gt;
    apellido_paterno = models.CharField(max_length=100)&lt;br&gt;
    apellido_materno = models.CharField(max_length=100) &lt;/p&gt;
&lt;p&gt;    class Meta:&lt;br&gt;
        permissions = ((‘ver_detalle_persona’, ‘Puede ver detalle Persona’),)&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;Veamos que hay de nuevo en nuestro modelo y lo primero que salta a la vista es el uso de una &lt;a href="https://datafull.co/p/que-es-una-metaclase-en-python"&gt;metaclase&lt;/a&gt; aquí definiremos el atributo permissions que es una tupla donde se definiran los múltiples permisos personalizados que podemos crear en este caso tenemos el par (‘ver_detalle_persona’, ‘Puede ver detalle Persona’) donde ‘ver_detalle_persona’ es el nombre del permiso y ‘Puede ver detalle Persona’ es una especie de descripción de lo que significa ese permiso, ahora ya lo tenemos listo, pero no podemos aplicarlo directamente sino que primero tenemos que hacer la migración correspondiente a la base de datos, ya que ha ocurrido una modificación del modelo:&lt;/p&gt;
&lt;p&gt;[sourcecode language="bash"]&lt;br&gt;
python manage.py makemigrations personas&lt;br&gt;
python manage.py migrate&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;Ya con esto podemos usar el permiso, para ello modificaremos el archivo personas.html:&lt;/p&gt;
&lt;p&gt;[sourcecode language="html"]&lt;br&gt;
{% if perms.personas.ver_detalle_persona %}&lt;br&gt;
&amp;lt;a class="btn btn-small" href="{% url ‘personas:detalle_persona’ persona.pk %}"&amp;gt;&lt;br&gt;
	&amp;lt;span class="glyphicon glyphicon-folder-open"&amp;gt;&amp;lt;/span&amp;gt;&lt;br&gt;
&amp;lt;/a&amp;gt;&lt;br&gt;
{% endif %}&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;Ahora nos logueamos con cualquiera de los usuarios nuevos que creamos en la sesión pasada, en este caso lo haremos con usuario1:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pythonpiura.org/2016/05/sin_permiso_ver_persona.jpg"&gt;&lt;img class="aligncenter size-large wp-image-247" src="https://pythonpiura.files.wordpress.com/2016/05/sin_permiso_ver_persona.jpg?w=604" alt="sin_permiso_ver_persona" width="604" height="208"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;Y vemos que no aparece el ícono del libro por lo tanto aparentemente no podemos acceder al detalle de la persona, pero igual que la vez pasada si es posible acceder a través de la url:&lt;/p&gt;
&lt;p&gt;http://localhost:8000/personas/detalle_persona/44626821/&lt;/p&gt;
&lt;p&gt;Nos falta hacer lo mismo de antes en nuestra vista DetallePersona:&lt;/p&gt;
&lt;p&gt;views.py&lt;/p&gt;
&lt;p&gt;[sourcecode language="python"]&lt;br&gt;
class DetallePersona(DetailView):&lt;br&gt;
    model = Persona&lt;br&gt;
    template_name = ‘detalle_persona.html’&lt;/p&gt;
&lt;p&gt;    @method_decorator(permission_required(‘personas.ver_detalle_persona’,reverse_lazy(‘personas:personas’)))&lt;br&gt;
    def dispatch(self, *args, **kwargs):&lt;br&gt;
        return super(DetallePersona, self).dispatch(*args, **kwargs)&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;Listo ya con esto el usuario no puede ingresar al detalle de la persona y es inmediatamente redireccionado a la tabla de personas, ahora otorguemosle permisos al usuario1 a través de la interfaz de administración:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pythonpiura.org/2016/05/permiso_ver_detalle_persona.jpg"&gt;&lt;img class="aligncenter size-large wp-image-248" src="https://pythonpiura.files.wordpress.com/2016/05/permiso_ver_detalle_persona.jpg?w=604" alt="permiso_ver_detalle_persona" width="604" height="156"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;Damos click en la flecha y guardamos la modificación, ahora ingresemos a la aplicación personas con el usuario1 y nos debe salir una pantalla como la siguiente:&lt;br&gt;
&lt;a href="http://pythonpiura.org/2016/05/con_permiso_ver_persona.jpg"&gt;&lt;img class="aligncenter size-large wp-image-249" src="https://pythonpiura.files.wordpress.com/2016/05/con_permiso_ver_persona.jpg?w=604" alt="con_permiso_ver_persona" width="604" height="205"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;Eso es todo por hoy, en un proximo post terminaremos de personalizar el resto de permisos y hacerle algunas modificaciones estéticas a nuestro proyecto.&lt;br&gt;
Saludos.&lt;/p&gt;
</description><category>Círculo</category><guid>http://pythonpiura.org/posts/2016/05/02/personalizando-permisos/</guid><pubDate>Tue, 03 May 2016 02:13:53 GMT</pubDate></item><item><title>Aplicar Permisos por Usuario en Django</title><link>http://pythonpiura.org/posts/2016/04/28/permisos-basicos-en-django/</link><dc:creator>Miguel Amaya</dc:creator><description>&lt;p style="text-align:justify;"&gt;Hasta ahora solo hemos trabajado con un usuario(el superusuario que creamos al principio) en nuestro proyecto, pero en la vida real son muchos los usuarios que interactuan con el software y todos no cuentan con los mismos permisos, hay algunos que pueden crear, ver, editar o eliminar elementos y otros no. Para empezar a trabajar con permisos primero debemos crear algunos usuarios adicionales, para ello vamos a ingresar a la consola de administración de Django, poniendo lo siguiente en nuestra barra de direcciones:&lt;/p&gt;
&lt;p&gt;http://localhost:8000/admin&lt;/p&gt;
&lt;p&gt;A continuación veremos una pantalla como esta:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pythonpiura.org/2016/04/login_administracion.jpg"&gt;&lt;img class="aligncenter size-medium wp-image-223" src="https://pythonpiura.files.wordpress.com/2016/04/login_administracion.jpg?w=300" alt="login_administracion" width="300" height="127"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;Aquí nos logueamos usando el superusuario con el que hemos venido trabajando y tendremos una pantalla como esta:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pythonpiura.org/2016/04/admin_django.jpg"&gt;&lt;img class="aligncenter size-medium wp-image-224" src="https://pythonpiura.files.wordpress.com/2016/04/admin_django.jpg?w=300" alt="admin_django" width="300" height="61"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;En el enlace donde dice Users vamos a dar click en Add para crear nuestro nuevo usuario, al que llamaremos usuario1:&lt;br&gt;
&lt;a href="http://pythonpiura.org/2016/04/crear_usuario.jpg"&gt;&lt;img class="aligncenter size-medium wp-image-225" src="https://pythonpiura.files.wordpress.com/2016/04/crear_usuario.jpg?w=300" alt="crear_usuario" width="300" height="88"&gt;&lt;/a&gt;&lt;br&gt;
Completamos los campos y le damos click a save:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pythonpiura.org/2016/04/usuario_creado.jpg"&gt;&lt;img class="aligncenter size-medium wp-image-226" src="https://pythonpiura.files.wordpress.com/2016/04/usuario_creado.jpg?w=300" alt="usuario_creado" width="300" height="207"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;Por ahora con esto es suficiente y ya tenemos nuestro usuario creado y listo para usarlo, salimos dando click en logout y nos vamos al login del proyecto para ingresar con nuestro nuevo usuario y la contraseña que le hemos asignado:&lt;br&gt;
&lt;a href="http://pythonpiura.org/2016/04/nuevo_logueo.jpg"&gt;&lt;img class="aligncenter size-medium wp-image-227" src="https://pythonpiura.files.wordpress.com/2016/04/nuevo_logueo.jpg?w=300" alt="nuevo_logueo" width="300" height="210"&gt;&lt;/a&gt;&lt;br&gt;
En nuestra aplicación personas, con este usuario podemos hacer lo mismo que con el usuario anterior, pero que pasa si nosotros queremos restringir algunas cosas a este nuevo usuario, por ejemplo, no dejar que este usuario cree ni modifique personas, pero que si pueda ver su detalle y exportar el reporte en una hoja de calculo ¿Cómo hacemos esto?&lt;br&gt;
Con Django otra vez esto es muy sencillo y podemos definir diferentes niveles de acceso, restringiendo las opciones en la plantilla html y negando el acceso a la vista en cuestión, hagamos lo primero:&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;Si queremos restringir el acceso a las opciones desde la plantilla html, lo mas rápido que se nos ocurre es eliminar los íconos que nos brindan esas opciones, esto lo podemos hacer usando los permisos proporcionados por django de la siguiente manera:&lt;br&gt;
Primero para restringir la visualización del ícono de crear personas:&lt;br&gt;
personas.html&lt;/p&gt;
&lt;p&gt;[sourcecode language="html"]&lt;br&gt;
{% if perms.personas.add_persona %}&lt;/p&gt;
&lt;p&gt;&amp;lt;div class="col-lg-1"&amp;gt;&lt;br&gt;
	&amp;lt;a id="crear_detalle" href="reporte_personas_excel’ %}" class="btn btn-info btn-block"&amp;gt;&lt;br&gt;
		&amp;lt;span class="glyphicon glyphicon-list-alt"&amp;gt;&amp;lt;/span&amp;gt;&lt;br&gt;
	&amp;lt;/a&amp;gt;&lt;br&gt;
&amp;lt;/div&amp;gt;&lt;/p&gt;
&lt;p&gt;{% endif %}&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;Si observamos detenidamente hemos agregado en la parte superior del div del enlace un condicional que utilizar una variable llamada perms, en esta variable se almacenan los permisos de los que dispone el usuario que ha iniciado sesión, luego de perms podemos observar el nombre de la aplicación, en nuestro caso personas, y finalmente tenemos el permiso llamado add y el modelo persona que configuran el permiso add_persona, esta condificional nos dice, si el usuario tiene el permiso add_persona, entonces se debe renderizar el div, sino no hace nada.&lt;br&gt;
Si ejecutamos nuestra aplicación observamos lo siguiente:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pythonpiura.org/2016/04/no_crear1.jpg"&gt;&lt;img class="aligncenter size-medium wp-image-232" src="https://pythonpiura.files.wordpress.com/2016/04/no_crear1.jpg?w=300" alt="no_crear" width="300" height="119"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;El ícono de agregar ya no aparece, pero todavía no podemos cantar victoria, un usuario avispado puede recordar la url de creación de personas y tipearla directamente en la barra de direcciones:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pythonpiura.org/2016/04/crear_persona.jpg"&gt;&lt;img class="aligncenter size-medium wp-image-229" src="https://pythonpiura.files.wordpress.com/2016/04/crear_persona.jpg?w=300" alt="crear_persona" width="300" height="229"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;Mmmm, vemos que si puede ingresar ¿Cómo hacemos para restringir eso? Nuestros viejos amigos los decoradores vuelven nuevamente a nuestro auxilio, para ello debemos editar el archivo views.py:&lt;/p&gt;
&lt;p&gt;[sourcecode language="python"]&lt;br&gt;
from django.contrib.auth.decorators import permission_required&lt;br&gt;
from django.utils.decorators import method_decorator&lt;br&gt;
class CrearPersona(CreateView):&lt;br&gt;
    model = Persona&lt;br&gt;
    fields =['dni','nombre','apellido_paterno','apellido_materno']&lt;br&gt;
    template_name = ‘crear_persona.html’&lt;br&gt;
    success_url = reverse_lazy(‘personas:personas’)&lt;/p&gt;
&lt;p&gt;    @method_decorator(permission_required(‘personas.add_persona’,reverse_lazy(‘personas:personas’)))&lt;br&gt;
    def dispatch(self, *args, **kwargs):&lt;br&gt;
        return super(CrearPersona, self).dispatch(*args, **kwargs)&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;Expliquemos esto que está un poco endiablado:&lt;br&gt;
Un método sobre una clase no equivale realmente a una función independiente, por lo que se debe transformar en un decorador primero, el decorador @method_decorator transforma un decorador de una función en un decorador de un método a fin de que puede ser usado sobre una instancia de un método, en el caso de las vistas basadas en clase a quien debemos aplicar el decorador es al método dispatch, en este ejemplo, cada instancia de CrearPersona tendrá protección de permission_required.&lt;br&gt;
El punto de entrada as_view() crea una instancia de la clase y llama al método dispatch(), (el despachador o resolvedor de URL) que busca la petición para determinar si es un GET, POST, etc, y releva la petición a un método que coincida con uno definido, o levante una excepción HttpResponseNotAllowed si no encuentra coincidencias.&lt;br&gt;
A la función permission_required se le deben pasar dos argumentos:&lt;br&gt;
El primero es el permiso a verificar que en este caso es add_persona y tiene la misma notación, primero la aplicación y luego el permiso.&lt;br&gt;
El segundo es la url a donde debe ser direccionado el usuario en caso de no tener el permiso necesario, en este caso a la url personas.&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;Ahora pongamos nuevamente la url anterior y veamos que nos sale:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pythonpiura.org/2016/04/permiso_denegado.jpg"&gt;&lt;img class="aligncenter size-medium wp-image-230" src="https://pythonpiura.files.wordpress.com/2016/04/permiso_denegado.jpg?w=300" alt="permiso_denegado" width="300" height="142"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;Bueno con esto ya nos aseguramos que el usuario “usuario1″ no va a poder entrar de ninguna manera a la funcionalidad de creación de personas, ahora lo que falta es aplicar lo mismo a la vista ModificarPersona las demás vistas tendrá un tratamiento especial en un artículo posterior:&lt;/p&gt;
&lt;p&gt;personas.html&lt;/p&gt;
&lt;p&gt;[sourcecode language="html"]&lt;/p&gt;
&lt;p&gt;&amp;lt;tbody&amp;gt;&lt;br&gt;
{% for persona in personas %}&lt;br&gt;
	&amp;lt;tr&amp;gt;&lt;br&gt;
		&amp;lt;td&amp;gt;{{ persona.dni }}&amp;lt;/td&amp;gt;&lt;br&gt;
		&amp;lt;td&amp;gt;{{ persona.nombre }}&amp;lt;/td&amp;gt;&lt;br&gt;
		&amp;lt;td&amp;gt;{{ persona.apellido_paterno }}&amp;lt;/td&amp;gt;&lt;br&gt;
		&amp;lt;td&amp;gt;{{ persona.apellido_materno }}&amp;lt;/td&amp;gt;&lt;br&gt;
		&amp;lt;td class="text-center"&amp;gt;&lt;br&gt;
			&amp;lt;a class="btn btn-small" href="{% url ‘personas:detalle_persona’ persona.pk %}"&amp;gt;&lt;br&gt;
				&amp;lt;span class="glyphicon glyphicon-folder-open"&amp;gt;&amp;lt;/span&amp;gt;&lt;br&gt;
			&amp;lt;/a&amp;gt;&lt;br&gt;
			{% if perms.personas.change_persona %}&lt;br&gt;
			&amp;lt;a class="btn btn-small" href="{% url ‘personas:modificar_persona’ persona.pk %}"&amp;gt;&lt;br&gt;
				&amp;lt;span class="glyphicon glyphicon-pencil"&amp;gt;&amp;lt;/span&amp;gt;&lt;br&gt;
			&amp;lt;/a&amp;gt;&lt;br&gt;
			{% endif %}&lt;br&gt;
		&amp;lt;/td&amp;gt;&lt;br&gt;
	&amp;lt;/tr&amp;gt;&lt;br&gt;
{% endfor %}&lt;br&gt;
&amp;lt;/tbody&amp;gt;&lt;/p&gt;
&lt;p&gt;[/sourcecode]&lt;/p&gt;
&lt;p&gt;views.py&lt;/p&gt;
&lt;p&gt;[sourcecode language="python"]&lt;br&gt;
class ModificarPersona(UpdateView):&lt;br&gt;
    model = Persona&lt;br&gt;
    template_name = ‘modificar_persona.html’&lt;br&gt;
    fields = ['dni','nombre','apellido_paterno','apellido_materno']&lt;br&gt;
    success_url = reverse_lazy(‘personas:personas’)&lt;/p&gt;
&lt;p&gt;    @method_decorator(permission_required(‘personas.change_persona’,reverse_lazy(‘personas:personas’)))&lt;br&gt;
    def dispatch(self, *args, **kwargs):&lt;br&gt;
        return super(ModificarPersona, self).dispatch(*args, **kwargs)&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;Notamos que el permiso ahora se llama change_persona, detengamonos un poco aquí y expliquemos esto, por defecto django aplica tres permisos a cada uno de nuestros modelos: add, change y delete, que especifican si un usuario puede crear, modificar o borrar un elemento de un modelo dado, en este caso el modelo es persona.&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;Si corremos nuestra proyecto tenemos lo siguiente:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pythonpiura.org/2016/04/sin_accesos.jpg"&gt;&lt;img class="aligncenter size-medium wp-image-233" src="https://pythonpiura.files.wordpress.com/2016/04/sin_accesos.jpg?w=300" alt="sin_accesos" width="300" height="113"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;Nótese que ya no aparece el lápiz de edición y tampoco se puede acceder con el url de modificar directamente en la barra de direcciones.&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;Ahora vamos a crear un nuevo usuario llamado usuario2, al que si le vamos a dar los permisos de crear y modificar, repetimos los pasos para crear el usuario en la interfaz de administración y nos detenemos en la ventana posterior a la creación del usuario, en la opción de permisos:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pythonpiura.org/2016/04/permisos.jpg"&gt;&lt;img class="aligncenter size-medium wp-image-234" src="https://pythonpiura.files.wordpress.com/2016/04/permisos.jpg?w=300" alt="permisos" width="300" height="86"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;En esta opción tenemos un sinnumero de permisos, busquemos los relacionados a la aplicación personas y al modelo persona y los seleccionamos:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pythonpiura.org/2016/04/seleccionar_permisos.jpg"&gt;&lt;img class="aligncenter size-medium wp-image-235" src="https://pythonpiura.files.wordpress.com/2016/04/seleccionar_permisos.jpg?w=300" alt="seleccionar_permisos" width="300" height="89"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Seleccionamos la flechita entre los dos cuadros y le damos al botón Save:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pythonpiura.org/2016/04/escoger.jpg"&gt;&lt;img class="aligncenter size-medium wp-image-236" src="https://pythonpiura.files.wordpress.com/2016/04/escoger.jpg?w=300" alt="escoger" width="300" height="78"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;Con esto ya tenemos que el usuario “usuario2″ tiene los permisos asignados. Ahora salgamos de la interfaz de administración e ingresemos a nuestro proyecto con el “usuario2″:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pythonpiura.org/2016/04/con_permisos.jpg"&gt;&lt;img class="aligncenter size-medium wp-image-237" src="https://pythonpiura.files.wordpress.com/2016/04/con_permisos.jpg?w=300" alt="con_permisos" width="300" height="115"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;Listo ahora si el usuario2, ya tendrá estos permisos básicos y el usuario1 no, el usuario mamaya es superusuario por lo tanto puede ingresar donde quiera.&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;Eso es todo.&lt;br&gt;
Saludos.&lt;/p&gt;
</description><category>Django</category><guid>http://pythonpiura.org/posts/2016/04/28/permisos-basicos-en-django/</guid><pubDate>Fri, 29 Apr 2016 03:33:04 GMT</pubDate></item><item><title>Mejorando Nuestro Login</title><link>http://pythonpiura.org/posts/2016/04/28/mejorando-nuestro-login/</link><dc:creator>Miguel Amaya</dc:creator><description>&lt;p style="text-align:justify;"&gt;Este es un post pequeñito donde vamos a demostrar como mejorar nuestro login que se ve un poco feo, para ello debemos crear un módulo de Python llamado forms.py en nuestra aplicación seguridad:&lt;br&gt;
&lt;a href="http://pythonpiura.org/2016/04/forms.jpg"&gt;&lt;img class="aligncenter size-full wp-image-211" src="http://pythonpiura.org/2016/04/forms.jpg" alt="forms" width="237" height="201"&gt;&lt;/a&gt;&lt;br&gt;
Ahora vamos a crear una clase llamada FormularioLogin que va a heredar de AuthenticationForm, la herencia en Python se determina poniendo la clase de la que se va a heredar entre parentesis en la definición de la clase hija:&lt;/p&gt;
&lt;p&gt;forms.py&lt;/p&gt;
&lt;p&gt;[sourcecode language="python"]&lt;br&gt;
from django.contrib.auth.forms import AuthenticationForm&lt;/p&gt;
&lt;p&gt;class FormularioLogin(AuthenticationForm):&lt;br&gt;
    def __init__(self, *args, **kwargs):&lt;br&gt;
        super(FormularioLogin, self).__init__(*args, **kwargs)&lt;br&gt;
        self.fields['username'].widget.attrs['class'] = ‘form-control’&lt;br&gt;
        self.fields['username'].widget.attrs['placeholder'] = ‘Usuario’&lt;br&gt;
        self.fields['password'].widget.attrs['class'] = ‘form-control’&lt;br&gt;
        self.fields['password'].widget.attrs['placeholder'] = ‘Contraseña’&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;¿Que cosa hemos hecho aquí?, sencillo hemos sobreescrito el comportamiento de los campos del formulario AuthenticationForm, expliquemos esto: primero se necesita acceder a cada uno de los campos del formulario, estos son ‘username’ y ‘password’, y se accede a ellos a través de la lista “fields”, luego accederemos a los widgets de cada uno de estos campos, el widget es el elemento o etiqueta html que se dibuja en el navegador, en este caso los dos son “input”, al ser elementos html tienen atributos y cada atributo tiene un valor, en este caso vamos a modificar los atributos “class” y “placeholder”, el atributo class establece la clase CSS que se aplica a los estilos del elemento y el atributo placeholder provee una ayuda a los usuarios para indicar que cosa se debe escribir en las cajas de texto. Hemos aplicado la clase &lt;a href="http://librosweb.es/libro/bootstrap_3/capitulo_5/campos_de_formulario.html"&gt;form-control&lt;/a&gt; de bootstrap, que sirve para mostrar los elementos de un formulario mejor presentados, a ambos elementos y hemos definido la ayuda que aparecerá en cada caja de texto.&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;Recordemos que en nuestra vista Login el atributo form_class es AuthenticationForm, ahora esto va a cambiar:&lt;/p&gt;
&lt;p&gt;views.py&lt;/p&gt;
&lt;p&gt;[sourcecode language="python"]&lt;br&gt;
from seguridad.forms import FormularioLogin&lt;/p&gt;
&lt;p&gt;# Create your views here.&lt;br&gt;
class Login(FormView):&lt;br&gt;
    template_name = ‘login.html’&lt;br&gt;
    form_class = FormularioLogin&lt;br&gt;
    success_url =  reverse_lazy("personas:bienvenida")&lt;/p&gt;
&lt;p&gt;    def dispatch(self, request, *args, **kwargs):&lt;br&gt;
        if request.user.is_authenticated():&lt;br&gt;
            return HttpResponseRedirect(self.get_success_url())&lt;br&gt;
        else:&lt;br&gt;
            return super(Login, self).dispatch(request, *args, **kwargs)&lt;/p&gt;
&lt;p&gt;    def form_valid(self, form):&lt;br&gt;
        login(self.request, form.get_user())&lt;br&gt;
        return super(Login, self).form_valid(form)&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;Finalmente tendremos la siguiente presentación:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pythonpiura.org/2016/04/login_bonito.jpg"&gt;&lt;img class="aligncenter wp-image-212" src="https://pythonpiura.files.wordpress.com/2016/04/login_bonito.jpg?w=300" alt="login_bonito" width="519" height="175"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;¿Mejor, verdad?, eso es todo por hoy.&lt;/p&gt;
&lt;p&gt;Saludos.&lt;/p&gt;
</description><category>Círculo</category><guid>http://pythonpiura.org/posts/2016/04/28/mejorando-nuestro-login/</guid><pubDate>Fri, 29 Apr 2016 01:50:59 GMT</pubDate></item></channel></rss>