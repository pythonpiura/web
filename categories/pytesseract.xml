<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python Piura (pytesseract)</title><link>http://pythonpiura.org/</link><description></description><atom:link href="http://pythonpiura.org/categories/pytesseract.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Sun, 24 Jul 2016 17:44:06 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Consulta DNI - RENIEC</title><link>http://pythonpiura.org/posts/2016/05/11/consulta-dni-reniec/</link><dc:creator>Miguel Amaya</dc:creator><description>&lt;p style="text-align:justify;"&gt;En esta oportunidad vamos a hacer un ejemplo mas complejo, ya que el captcha así lo amerita, nuestra página objetivo es la siguiente:&lt;br&gt;
&lt;a href="https://cel.reniec.gob.pe/valreg/valreg.do"&gt;https://cel.reniec.gob.pe/valreg/valreg.do&lt;/a&gt;&lt;br&gt;
&lt;a href="http://pythonpiura.org/2016/05/reniec.jpg"&gt;&lt;img class="aligncenter size-full wp-image-274" src="http://pythonpiura.org/2016/05/reniec.jpg" alt="reniec" width="579" height="396"&gt;&lt;/a&gt;&lt;br&gt;
En esta página podemos ingresar el número de DNI y obtener el nombre completo del ciudadano. Como se ve en la imagen aquí nos enfrentamos a un captcha mas completo y a un teclado dinámico compuesto de botones, para romper este captcha tenemos que modificar la imagen para obtener el texto correcto, eliminando las lineas que atraviesan las letras y que tienen una tonalidad distinta de azul, el proceso no será 100% seguro pero funciona en la mayoría de los casos:&lt;/p&gt;
&lt;p&gt;[sourcecode language="python"]&lt;br&gt;
# -*- coding: utf-8 -*-&lt;br&gt;
from selenium import webdriver&lt;br&gt;
from selenium.webdriver.common.by import By&lt;br&gt;
from selenium.webdriver.support.wait import WebDriverWait&lt;br&gt;
from selenium.webdriver.support import expected_conditions as EC&lt;/p&gt;
&lt;p&gt;try:&lt;br&gt;
    import Image&lt;br&gt;
except ImportError:&lt;br&gt;
    from PIL import Image&lt;br&gt;
import pytesseract&lt;/p&gt;
&lt;p&gt;def ir_reniec_web(dni):&lt;br&gt;
    fp = webdriver.FirefoxProfile()&lt;br&gt;
    driver = webdriver.Firefox(fp)&lt;br&gt;
    #Definimos nuestra página objetivo&lt;br&gt;
    driver.get("https://cel.reniec.gob.pe/valreg/valreg.do")&lt;br&gt;
    try:&lt;br&gt;
        #Esperamos hasta que se cargue la imagen con el captcha&lt;br&gt;
        WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.ID, "imagcodigo")))&lt;br&gt;
    except:&lt;br&gt;
        print "Element is not present"&lt;br&gt;
    #Hacemos la captura de pantalla correspondiente&lt;br&gt;
    driver.save_screenshot("screenshot.png")&lt;br&gt;
    img=Image.open(‘screenshot.png’)&lt;br&gt;
    #Obtenemos el ancho y el largo de la imagen&lt;br&gt;
    ancho = img.size[0]&lt;br&gt;
    alto = img.size[1]&lt;br&gt;
    #Recortamos la parte del captcha teniendo en cuenta el ancho y el largo de la imagen&lt;br&gt;
    img_recortada = img.crop((int(ancho/4.26),int(alto/3.64),int(ancho/2.8),int(alto/3)))&lt;br&gt;
    #Guardamos el recorte&lt;br&gt;
    img_recortada.save("recorte.png")&lt;br&gt;
    #Recorremos cada uno de los dígitos del DNI&lt;br&gt;
    for num in dni:&lt;br&gt;
        #Buscamos el boton que tenga como nombre tecla_0&lt;br&gt;
        boton_0 = driver.find_element_by_name("tecla_0")&lt;br&gt;
        #Obtenemos el valor del botón con nombre tecla_0&lt;br&gt;
        valor_0 = boton_0.get_attribute(‘value’)&lt;br&gt;
        #Buscamos el boton que tenga como nombre tecla_1&lt;br&gt;
        boton_1 = driver.find_element_by_name("tecla_1")&lt;br&gt;
        #Obtenemos el valor del botón con nombre tecla_1&lt;br&gt;
        valor_1 = boton_1.get_attribute(‘value’)&lt;br&gt;
        #Buscamos el boton que tenga como nombre tecla_2&lt;br&gt;
        boton_2 = driver.find_element_by_name("tecla_2")&lt;br&gt;
        #Obtenemos el valor del botón con nombre tecla_2&lt;br&gt;
        valor_2 = boton_2.get_attribute(‘value’)&lt;br&gt;
        #Buscamos el boton que tenga como nombre tecla_3&lt;br&gt;
        boton_3 = driver.find_element_by_name("tecla_3")&lt;br&gt;
        #Obtenemos el valor del botón con nombre tecla_3&lt;br&gt;
        valor_3 = boton_3.get_attribute(‘value’)&lt;br&gt;
        #Buscamos el boton que tenga como nombre tecla_4&lt;br&gt;
        boton_4 = driver.find_element_by_name("tecla_4")&lt;br&gt;
        #Obtenemos el valor del botón con nombre tecla_4&lt;br&gt;
        valor_4 = boton_4.get_attribute(‘value’)&lt;br&gt;
        #Buscamos el boton que tenga como nombre tecla_5&lt;br&gt;
        boton_5 = driver.find_element_by_name("tecla_5")&lt;br&gt;
        #Obtenemos el valor del botón con nombre tecla_5&lt;br&gt;
        valor_5 = boton_5.get_attribute(‘value’)&lt;br&gt;
        #Buscamos el boton que tenga como nombre tecla_6&lt;br&gt;
        boton_6 = driver.find_element_by_name("tecla_6")&lt;br&gt;
        #Obtenemos el valor del botón con nombre tecla_6&lt;br&gt;
        valor_6 = boton_6.get_attribute(‘value’)&lt;br&gt;
        #Buscamos el boton que tenga como nombre tecla_7&lt;br&gt;
        boton_7 = driver.find_element_by_name("tecla_7")&lt;br&gt;
        #Obtenemos el valor del botón con nombre tecla_7&lt;br&gt;
        valor_7 = boton_7.get_attribute(‘value’)&lt;br&gt;
        #Buscamos el boton que tenga como nombre tecla_8&lt;br&gt;
        boton_8 = driver.find_element_by_name("tecla_8")&lt;br&gt;
        #Obtenemos el valor del botón con nombre tecla_8&lt;br&gt;
        valor_8 = boton_8.get_attribute(‘value’)&lt;br&gt;
        #Buscamos el boton que tenga como nombre tecla_9&lt;br&gt;
        boton_9 = driver.find_element_by_name("tecla_9")&lt;br&gt;
        #Obtenemos el valor del botón con nombre tecla_9&lt;br&gt;
        valor_9 = boton_9.get_attribute(‘value’)&lt;br&gt;
        ”’Consultamos si el dígito del DNI es igual al valor del botón,&lt;br&gt;
        si es el caso entonces se da click en ese botón”’&lt;br&gt;
        if num==valor_0:&lt;br&gt;
            boton_0.click()&lt;br&gt;
        elif num==valor_1:&lt;br&gt;
            boton_1 = driver.find_element_by_name("tecla_1")&lt;br&gt;
            boton_1.click()&lt;br&gt;
        elif num==valor_2:&lt;br&gt;
            boton_2 = driver.find_element_by_name("tecla_2")&lt;br&gt;
            boton_2.click()&lt;br&gt;
        elif num==valor_3:&lt;br&gt;
            boton_3 = driver.find_element_by_name("tecla_3")&lt;br&gt;
            boton_3.click()&lt;br&gt;
        elif num==valor_4:&lt;br&gt;
            boton_4 = driver.find_element_by_name("tecla_4")&lt;br&gt;
            boton_4.click()&lt;br&gt;
        elif num==valor_5:&lt;br&gt;
            boton_5 = driver.find_element_by_name("tecla_5")&lt;br&gt;
            boton_5.click()&lt;br&gt;
        elif num==valor_6:&lt;br&gt;
            boton_6 = driver.find_element_by_name("tecla_6")&lt;br&gt;
            boton_6.click()&lt;br&gt;
        elif num==valor_7:&lt;br&gt;
            boton_7 = driver.find_element_by_name("tecla_7")&lt;br&gt;
            boton_7.click()&lt;br&gt;
        elif num==valor_8:&lt;br&gt;
            boton_8 = driver.find_element_by_name("tecla_8")&lt;br&gt;
            boton_8.click()&lt;br&gt;
        elif num==valor_9:&lt;br&gt;
            boton_9 = driver.find_element_by_name("tecla_9")&lt;br&gt;
            boton_9.click()&lt;br&gt;
    #Se llama al método romper_captcha para obtener el texto correspondiente&lt;br&gt;
    captcha = romper_captcha("recorte.png")&lt;br&gt;
    try:&lt;br&gt;
        #Obtenemos la caja de texto donde se escribe el texto del captcha&lt;br&gt;
        codigo = driver.find_element_by_name("imagen")&lt;br&gt;
        #Si el captcha está vacio o no se ha logrado romper se cierra el navegador y se termina la aplicación&lt;br&gt;
        if captcha==”:&lt;br&gt;
            driver.close()&lt;br&gt;
            return&lt;br&gt;
        #Escribimos el texto&lt;br&gt;
        codigo.send_keys(captcha)&lt;br&gt;
    except:&lt;br&gt;
        pass&lt;br&gt;
    try:&lt;br&gt;
        #Obtenemos el botón de consulta&lt;br&gt;
        boton_consultar=driver.find_element_by_name("bot_consultar")&lt;br&gt;
        #Damos click al botón de consulta&lt;br&gt;
        boton_consultar.click()&lt;br&gt;
    except:&lt;br&gt;
        print "Element is not present"&lt;br&gt;
    #Obtengo el resultado que aparece en el elemento llamado style2&lt;br&gt;
    resultado = driver.find_element_by_class_name("style2")&lt;br&gt;
    #Partimos el resultado para obtener el nombre&lt;br&gt;
    nombre = resultado.text.split(‘\n’)&lt;br&gt;
    driver.close()&lt;br&gt;
    return nombre[0]&lt;/p&gt;
&lt;p&gt;def romper_captcha(nombre_imagen):&lt;br&gt;
    #Abro la imagen&lt;br&gt;
    img = Image.open(nombre_imagen)&lt;br&gt;
    #Obtengo un arreglo de píxeles de la imagen&lt;br&gt;
    pixdata = img.load()&lt;br&gt;
    ”’Modifico los píxeles de la imagen de acuerdo al análisis de los colores de las letras&lt;br&gt;
    y las lineas que cruzan el texto, pintando de negro los píxeles del texto y de blanco las lineas”’&lt;br&gt;
    for y in xrange(img.size[1]):&lt;br&gt;
        for x in xrange(img.size[0]):&lt;br&gt;
            if pixdata[x, y][2] &amp;lt; 146: pixdata[x, y] = (255, 255, 255) for y in xrange(img.size[1]): for x in xrange(img.size[0]): if pixdata[x, y][1] &amp;gt; 64:&lt;br&gt;
                pixdata[x, y] = (255, 255, 255)&lt;br&gt;
            else:&lt;br&gt;
                pixdata[x, y] = (0,0,0)&lt;br&gt;
    #Guardo la imagen modificada&lt;br&gt;
    img.save("modificado.jpg")&lt;br&gt;
    #Abro la imagen modificado&lt;br&gt;
    image = Image.open("modificado.jpg")&lt;br&gt;
    #Obtenemos el texto de la imagen&lt;br&gt;
    frase = pytesseract.image_to_string(image)&lt;br&gt;
    #Retornamos el texto eliminado los espacios en blanco entre las palabras y convirtiendolas en mayúsculas&lt;br&gt;
    return frase.replace(‘ ‘,”).upper()&lt;/p&gt;
&lt;p&gt;def main():&lt;br&gt;
    dni = ’123456789′&lt;br&gt;
    print ir_reniec_web(dni)&lt;/p&gt;
&lt;p&gt;main()&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;Espero que les sea útil.&lt;br&gt;
Saludos.&lt;/p&gt;
</description><category>pillow</category><category>pytesseract</category><category>Python</category><category>Selenium</category><guid>http://pythonpiura.org/posts/2016/05/11/consulta-dni-reniec/</guid><pubDate>Thu, 12 May 2016 02:37:08 GMT</pubDate></item><item><title>Otro Ejemplo de Web Scrapping con Python</title><link>http://pythonpiura.org/posts/2016/05/10/otro-ejemplo-de-web-scrapping-con-python/</link><dc:creator>Miguel Amaya</dc:creator><description>&lt;p style="text-align:justify;"&gt;En esta oportunidad vamos a compartir con ustedes un nuevo script para consultar rucs de manera masiva a partir del DNI en la página web de sunat, esto ha sido un poco mas complejo debido a que la página en cuestión usa frames, también hemos mejorado un poquito el problema de los tamaños haciendo el recorte a partir del tamaño de la captura de pantalla:&lt;/p&gt;
&lt;p&gt;[sourcecode language="python"]&lt;br&gt;
# -*- coding: utf-8 -*-&lt;br&gt;
from selenium import webdriver&lt;br&gt;
from selenium.webdriver.common.by import By&lt;br&gt;
from selenium.webdriver.support.wait import WebDriverWait&lt;br&gt;
from selenium.webdriver.support import expected_conditions as EC&lt;br&gt;
try:&lt;br&gt;
    import Image&lt;br&gt;
except ImportError:&lt;br&gt;
    from PIL import Image&lt;br&gt;
import pytesseract&lt;/p&gt;
&lt;p&gt;def ir_sunat_web(dni):&lt;br&gt;
    driver = webdriver.Firefox()&lt;br&gt;
    #Fijamos nuestra página objetivo&lt;br&gt;
    driver.get("http://ww1.sunat.gob.pe/cl-ti-itmrconsruc/jcrS00Alias")&lt;br&gt;
    try:&lt;br&gt;
        #Debido a que la página tiene frames debemos hacer el cambio al frame con nombre "leftFrame"&lt;br&gt;
        driver.switch_to_frame("leftFrame")&lt;br&gt;
    except:&lt;br&gt;
        return []&lt;br&gt;
        driver.close()&lt;br&gt;
    try:&lt;br&gt;
        #Obtenemos los radio buttons que nos permiten seleccionar el tipo de búsqueda a hacer&lt;br&gt;
        radios = driver.find_elements_by_name("tQuery")&lt;br&gt;
        #Seleccionamos la búsqueda por DNI&lt;br&gt;
        radios[1].click()&lt;br&gt;
        #Obtenemos la caja de texto donde se ingresa el DNI&lt;br&gt;
        documento = driver.find_element_by_name("search2")&lt;br&gt;
        #Escribimos el DNI&lt;br&gt;
        documento.send_keys(dni)&lt;br&gt;
        #Esperamos hasta que el texto esté escrito en la caja de texto del DNI&lt;br&gt;
        WebDriverWait(driver, 5).until(EC.text_to_be_present_in_element_value((By.NAME, "search2"),dni))&lt;br&gt;
    except:&lt;br&gt;
        driver.close()&lt;br&gt;
        return []&lt;br&gt;
    try:&lt;br&gt;
        #Esperamos hasta que se cargue la imagen con el captcha&lt;br&gt;
        WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.NAME, "imagen")))&lt;br&gt;
        #Hacemos la captura de pantalla correspondiente&lt;br&gt;
        driver.save_screenshot("screenshot.jpg")&lt;br&gt;
        img=Image.open(‘screenshot.jpg’)&lt;br&gt;
        #Obtenemos el ancho y el largo de la imagen&lt;br&gt;
        ancho = img.size[0]&lt;br&gt;
        alto = img.size[1]&lt;br&gt;
        #Recortamos la parte del captcha teniendo en cuenta el ancho y el largo de la imagen&lt;br&gt;
        img_recortada = img.crop((ancho/1.4,alto/20,ancho/1.25,alto/6.9))&lt;br&gt;
        #Guardamos el recorte&lt;br&gt;
        img_recortada.save("recorte.jpg")&lt;br&gt;
        #Obtenemos el texto del captcha&lt;br&gt;
        captcha = pytesseract.image_to_string(img_recortada)&lt;br&gt;
        #Obtenemos la caja de texto donde se escribe el texto del captcha&lt;br&gt;
        codigo = driver.find_element_by_name("codigo")&lt;br&gt;
        #Escribimos el texto&lt;br&gt;
        codigo.send_keys(captcha)&lt;br&gt;
    except:&lt;br&gt;
        driver.close()&lt;br&gt;
        return []&lt;br&gt;
    try:&lt;br&gt;
        #Obtenemos el botón de búsqueda&lt;br&gt;
        boton = driver.find_element_by_class_name("form-button")&lt;br&gt;
        #Damos click al botón de búsqueda&lt;br&gt;
        boton.click()&lt;br&gt;
        #Cambiamos al frame por defecto&lt;br&gt;
        driver.switch_to_default_content()&lt;br&gt;
        #Cambiamos al frame llamado "mainFrame" que contiene la tabla de resultados con un enlace conteniendo el ruc&lt;br&gt;
        driver.switch_to_frame("mainFrame")&lt;br&gt;
    except:&lt;br&gt;
        driver.close()&lt;br&gt;
        return []&lt;br&gt;
    try:&lt;br&gt;
        #Esperamos que se cargue la tabla de resultados&lt;br&gt;
        WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.CLASS_NAME, "form-table")))&lt;br&gt;
        #Obtenemos el enlace que contiene al RUC&lt;br&gt;
        enlace=driver.find_element(By.TAG_NAME,"a")&lt;br&gt;
        #Le damos click al enlace&lt;br&gt;
        enlace.click()&lt;br&gt;
        #Ahora si tenemos una tabla que contiene el detalle de los resultados del RUC consultado&lt;br&gt;
        #Obtenemos todas las filas&lt;br&gt;
        trs = driver.find_elements(By.TAG_NAME, "tr")&lt;br&gt;
        #Obtenemos las celdas de la primera fila&lt;br&gt;
        tds = trs[0].find_elements(By.TAG_NAME, "td")&lt;br&gt;
        #A la segunda celda la partimos ya que tiene el ruc y la razón social separados por un guión&lt;br&gt;
        primera_linea = tds[1].text.split(‘-’)&lt;br&gt;
        ruc = primera_linea[0].strip()&lt;br&gt;
        razon_social = primera_linea[1].strip()&lt;br&gt;
        #Obtenemos la segunda linea que tiene el tipo de contribuyente&lt;br&gt;
        tds = trs[1].find_elements(By.TAG_NAME, "td")&lt;br&gt;
        tipo_contribuyente = tds[1].text.strip()&lt;br&gt;
        #Obtenemos la dirección&lt;br&gt;
        tds = trs[7].find_elements(By.TAG_NAME, "td")&lt;br&gt;
        direccion = tds[1].text.strip()&lt;br&gt;
    except:&lt;br&gt;
        driver.close()&lt;br&gt;
        return []&lt;br&gt;
    driver.close()&lt;br&gt;
    #Devolvemos una lista con los resultados.&lt;br&gt;
    datos = [ruc,razon_social,tipo_contribuyente,direccion]&lt;br&gt;
    return datos    &lt;/p&gt;
&lt;p&gt;def main():&lt;br&gt;
    #Ingresar DNI&lt;br&gt;
    dni = ’12345678′&lt;br&gt;
    print ir_sunat_web(dni)&lt;/p&gt;
&lt;p&gt;main()&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;http://www.youtube.com/watch?v=ijICFYtAuDE&lt;/p&gt;
&lt;p&gt;Esperamos que les sea útil.&lt;br&gt;
Saludos.&lt;/p&gt;
</description><category>Django</category><category>pytesseract</category><category>Selenium</category><guid>http://pythonpiura.org/posts/2016/05/10/otro-ejemplo-de-web-scrapping-con-python/</guid><pubDate>Wed, 11 May 2016 04:35:39 GMT</pubDate></item><item><title>Web Scrapping con Python y Selenium</title><link>http://pythonpiura.org/posts/2016/05/07/web-scrapping-con-python-y-selenium/</link><dc:creator>Miguel Amaya</dc:creator><description>&lt;p style="text-align:justify;"&gt;El día de hoy tuvimos el agrado de ser invitados por el &lt;a href="https://cideuel.wordpress.com/"&gt;Círculo UEL&lt;/a&gt; a dar una charla en el marco del FLISOL 2016 en la Universidad Los Ángeles de Chimbote Sede Piura y el tema fue Web Scrapping con Python y Selenium, hicimos algunos ejemplos muy interesantes y nos encantó la acogida del público y el interés suscitado, vamos a compartir los artículos que usamos:&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;&lt;a href="https://pythonpiura.wordpress.com/2014/09/18/selenium-con-python/"&gt;Selenium con Python&lt;/a&gt;&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;&lt;a href="https://pythonpiura.wordpress.com/2016/01/26/romper-captchas-con-pytesseract-y-selenium/"&gt;Romper Captchas con Pytesseract y Selenium&lt;/a&gt;&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;Las diapositivas:&lt;/p&gt;
&lt;p style="text-align:justify;"&gt;&lt;a href="http://pythonpiura.org/2016/05/charlapythonflisol2016.pdf"&gt;Descargar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;El script que fue la estrella de la mañana:&lt;/p&gt;
&lt;p&gt;[sourcecode language="python"]&lt;br&gt;
# -*- coding: utf-8 -*-&lt;br&gt;
from selenium import webdriver&lt;br&gt;
from selenium.webdriver.common.by import By&lt;br&gt;
from selenium.webdriver.support.wait import WebDriverWait&lt;br&gt;
from selenium.webdriver.support import expected_conditions as EC&lt;br&gt;
import os&lt;/p&gt;
&lt;p&gt;try:&lt;br&gt;
    import Image&lt;br&gt;
except ImportError:&lt;br&gt;
    from PIL import Image&lt;br&gt;
import pytesseract&lt;/p&gt;
&lt;p&gt;def decodifica_campo(campo):&lt;br&gt;
	return u"%s" % campo&lt;/p&gt;
&lt;p&gt;def ir_sunat_web(ruta):&lt;br&gt;
	fp = webdriver.FirefoxProfile()&lt;br&gt;
	fp.set_preference("browser.download.manager.showWhenStarting",False)&lt;br&gt;
	fp.set_preference("browser.download.manager.closeWhenDone", True);&lt;br&gt;
	fp.set_preference("browser.download.manager.showAlertOnComplete", False);&lt;br&gt;
	fp.set_preference("browser.helperApps.neverAsk.saveToDisk", "application/zip");&lt;br&gt;
	driver = webdriver.Firefox(fp)&lt;br&gt;
	driver.get("http://www.sunat.gob.pe/cl-ti-itmrconsmulruc/jrmS00Alias")&lt;br&gt;
	try:&lt;br&gt;
		WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.NAME, "imagen")))&lt;br&gt;
	except:&lt;br&gt;
		print "No carga imagen"&lt;br&gt;
	driver.save_screenshot("screenshot.png")&lt;br&gt;
	img=Image.open(‘screenshot.png’)&lt;br&gt;
	img_recortada = img.crop((700,309,800,361))&lt;br&gt;
	img_recortada.save("recorte.png")&lt;br&gt;
        try:&lt;br&gt;
            captcha = pytesseract.image_to_string(img_recortada)&lt;br&gt;
            codigo = driver.find_element_by_name("codigoA")&lt;br&gt;
            codigo.send_keys(captcha)&lt;br&gt;
        except:&lt;br&gt;
            pass&lt;br&gt;
	archivo = driver.find_element_by_name("archivo")&lt;br&gt;
	archivo.send_keys(ruta)&lt;br&gt;
	form = driver.find_element_by_name("frmConsMulRucArchivo")&lt;br&gt;
	botones=form.find_elements_by_class_name("form-button")&lt;br&gt;
	botones[1].click()&lt;br&gt;
	try:&lt;br&gt;
		WebDriverWait(driver, 5).until(EC.presence_of_all_elements_located((By.CLASS_NAME, "form-table")))&lt;br&gt;
		enlace=driver.find_element(By.TAG_NAME,"a")&lt;br&gt;
		enlace.click()&lt;br&gt;
	except:&lt;br&gt;
		print "Element is not present"&lt;br&gt;
	driver.close()&lt;/p&gt;
&lt;p&gt;def main():&lt;br&gt;
	ruta = "/home/usuario/carpeta"&lt;br&gt;
	ruta_archivo=os.path.join(ruta,"rucs.zip")&lt;br&gt;
	ir_sunat_web(ruta_archivo)&lt;/p&gt;
&lt;p&gt;main()&lt;br&gt;
[/sourcecode]&lt;/p&gt;
&lt;p&gt;Así como también un vídeo de su funcionamiento.&lt;/p&gt;
&lt;p&gt;http://www.youtube.com/watch?v=mUaVFYTlibM&lt;/p&gt;
&lt;p&gt;Saludos y muchas gracias.&lt;/p&gt;
</description><category>pillow</category><category>pytesseract</category><category>Python</category><category>Selenium</category><guid>http://pythonpiura.org/posts/2016/05/07/web-scrapping-con-python-y-selenium/</guid><pubDate>Sun, 08 May 2016 01:58:06 GMT</pubDate></item></channel></rss>